<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[PHP通过Thrift协议访问HBase]]></title>
      <url>http://oneblog.top/2016/06/21/infotech/bigdata/PHP%E9%80%9A%E8%BF%87Thrift%E5%8D%8F%E8%AE%AE%E8%AE%BF%E9%97%AEHBase/</url>
      <content type="html"><![CDATA[<p>虽然Java语言的使用者众多，但毕竟还是有很大部分开发者用了其它开发语言，因此HBase也针对性地提供了两种方式，REST接口服务和Thrift接口服务。</p>
<h3 id="REST网关"><a href="#REST网关" class="headerlink" title="REST网关"></a>REST网关</h3><h4 id="启动REST服务"><a href="#启动REST服务" class="headerlink" title="启动REST服务"></a>启动REST服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 默认监听8080端口</span></div><div class="line">./bin/hbase rest start</div></pre></td></tr></table></figure>
<blockquote>
<p>这种启动模式下，服务将运行在前台，如果需要运行在后台，请使用<figure class="highlight plain"><figcaption><span>start rest```命令启动服务</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">此时运行jps命令查看，会发现多了一个RESTServer进程。</div><div class="line"></div><div class="line">#### 接口访问测试</div><div class="line"></div><div class="line">```bash</div><div class="line"># 返回hbaase中所有表名</div><div class="line">curl http://localhost:8080/</div><div class="line"># 返回指定表+行键+列族的内容</div><div class="line">curl http://localhost:8080/myTable/rowKey/columnFamily</div></pre></td></tr></table></figure></p>
<p>本次测试返回的都是文本数据结果，但上次测试返回的是Base64编码字符串，暂未发现这两次的区别。<br>如果是Base64编码字符串，则需要解码，<figure class="highlight plain"><figcaption><span>YWJjMTIz" | base64 --decode```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">一般而言，HBase REST网关主要在简单测试或小规模部署中使用，如果是大规模线上应用，建议使用Thrift网关。</div><div class="line"></div><div class="line">### Thrift网关</div><div class="line"></div><div class="line">#### Thrift接口版本</div><div class="line"></div><div class="line">目前Thrift接口已经有了两个版本，两者差别很大，无法兼容，官方目前推荐使用v2版本。希望了解两个版本的具体差别，可以下载HBASE源代码自行查看。</div><div class="line"></div><div class="line">&gt; http://mirrors.cnnic.cn/apache/hbase/1.2.1/网页中，下载hbase-1.2.1-src.tar.gz源代码文件，解压后，对比以下两个文件：</div><div class="line">+ hbase-thrift/src/main/resources/org/apache/hadoop/hbase/thrift/Hbase.thrift</div><div class="line">+ hbase-thrift/src/main/resources/org/apache/hadoop/hbase/thrift2/Hbase.thrift</div><div class="line"></div><div class="line">#### 启动Thrift服务</div><div class="line"></div><div class="line">&gt; 使用Thrift2</div><div class="line"></div><div class="line">```bash</div><div class="line"># 默认监听9090端口</div><div class="line">./bin/hbase thrift2 start</div></pre></td></tr></table></figure></p>
<p>这种启动模式下，服务将运行在前台，如果需要运行在后台，请使用<figure class="highlight plain"><figcaption><span>start thrift2```命令启动服务</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">此时运行jps命令查看，会发现多了一个ThriftServer进程。</div><div class="line"></div><div class="line">#### PHP访问接口案例</div><div class="line"></div><div class="line">##### 编译Thrift协议</div><div class="line"></div><div class="line">&gt; 确认服务器上已安装autoconf automake make等工具</div><div class="line"></div><div class="line">下载thrift最新版本，https://thrift.apache.org/，当前0.9.3版本，解压。</div><div class="line"></div><div class="line">```bash</div><div class="line">cd thrift-0.9.3</div><div class="line"># 生成configure</div><div class="line">./bootstrap.sh</div><div class="line"># 生成Makefile，默认安装到/usr/local</div><div class="line">./configure</div><div class="line"># 编译安装</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="安装PHP包管理器composer"><a href="#安装PHP包管理器composer" class="headerlink" title="安装PHP包管理器composer"></a>安装PHP包管理器composer</h5><p>请自行搜索安装部署</p>
<h5 id="接口调用测试"><a href="#接口调用测试" class="headerlink" title="接口调用测试"></a>接口调用测试</h5><p>手动部署较为复杂，正好已有先人帮忙整合代码，建议先行使用后，如果还想继续深入了解的话，可以自行手动尝试。</p>
<p>源码地址： <a href="https://github.com/Moln/php-thrift-optimize" target="_blank" rel="external">https://github.com/Moln/php-thrift-optimize</a></p>
<p>下载到本地服务器后，根据使用说明，一共三个步骤：</p>
<ol>
<li><code>composer install</code>，会自动下载安装thrift库</li>
<li><code>thrift -gen php THBaseService.thrift</code>，生成php相关的thrift代码</li>
<li><code>php bin/ThriftOptimize.php</code>，根据提示输入Hbase.THbaseService，则会自动生成相关代码</li>
</ol>
<p>此时，修改THbaseServiceTest.php，将其中的table名修改后，运行<code>php THbaseServiceTest.php</code>即可测试。</p>
]]></content>
      
        
        <tags>
            
            <tag> hbase </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开发必备的npm库]]></title>
      <url>http://oneblog.top/2016/06/18/infotech/nodejs/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E7%9A%84npm%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>开发必备的npm库：</p>
<ul>
<li><a href="https://www.npmjs.com/package/browser-sync" target="_blank" rel="external">browser-sync</a><br>您不可或缺的测试助手（测试利器）：Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您30%的工作效率。有了它，您不用在多个浏览器、多个设备间来回切换，频繁的刷新页面。更神奇的是您在一个浏览器中滚动页面、点击等行为也会同步到其他浏览器和设备中，这一切还可以通过可视化界面来控制。</li>
<li><a href="https://www.npmjs.com/package/mocha" target="_blank" rel="external">mocha</a></li>
<li><a href="https://www.npmjs.com/package/chai" target="_blank" rel="external">chai</a><br>测试驱动开发推荐使用的npm库</li>
<li><a href="https://www.npmjs.com/package/compression" target="_blank" rel="external">compression</a> 压缩中间件</li>
<li><a href="https://www.npmjs.com/package/del" target="_blank" rel="external">del</a> Delete files/folders using globs</li>
<li><a href="https://www.npmjs.com/package/lolex" target="_blank" rel="external">lolex</a> Fake JavaScript timers，测试中模拟setTimeout等API</li>
<li><a href="https://www.npmjs.com/package/object-assign" target="_blank" rel="external">object-assign</a> ES2015 Object.assign() ponyfill，对象合并函数</li>
<li><a href="https://www.npmjs.com/package/pretty-hrtime" target="_blank" rel="external">pretty-hrtime</a> 测量时间的函数</li>
<li><a href="https://www.npmjs.com/package/require-dir" target="_blank" rel="external">require-dir</a> require升级版，可以require目录</li>
<li><a href="http://sinonjs.org/" target="_blank" rel="external">sinonjs</a> Standalone test spies, stubs and mocks for JavaScript.No dependencies, works with any unit testing framework.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sequelize.js基础应用]]></title>
      <url>http://oneblog.top/2016/06/13/infotech/nodejs/sequelize.js%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>sequelize cli</p>
<p>sequelize init<br>可以设置指定目录来创建 migrations、config/config.json、models、seeders</p>
<p>sequelize model:create –name User –attributes “openid:string, login:string, hashed_password:string”<br>默认自动创建自增id</p>
<p>sequelize db:migrate<br>sequelize db:migrate[:undo]<br>sequelize db:seed[:undo]</p>
<p>sequelize seed:create<br>sequelize migration:create<br>sequelize model:create</p>
<p>sequelize model:create同时生成migrations和models，可以修改models下的类，添加新方法</p>
<p>config/config.json配置文件</p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sequelize </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里云 - 表格存储TableStore]]></title>
      <url>http://oneblog.top/2016/06/13/infotech/linux/Aliyun/%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 阿里云 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[module.exports和exports]]></title>
      <url>http://oneblog.top/2016/06/13/infotech/nodejs/module.exports%E5%92%8Cexports/</url>
      <content type="html"><![CDATA[<p>模块module是nodejs中代码的基本组成，弄明白module.exports和exports，有助于提高代码的质量。</p>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>先看看nodejs基础代码中的定义，从这段代码看出：</p>
<ul>
<li>exports只是module.exports的引用，默认指向空对象{}；</li>
<li>require模块后，返回给调用者的是module.exports，而不是exports</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">exports</span> = <span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;&#125;;</div></pre></td></tr></table></figure>
<h3 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h3><h4 id="exports仅能用于定义对象属性"><a href="#exports仅能用于定义对象属性" class="headerlink" title="exports仅能用于定义对象属性"></a>exports仅能用于定义对象属性</h4><p>exports仅仅只是module.exports = {}的引用，那么exports就不能用重新赋值来处理，即<figure class="highlight plain"><figcaption><span>= xxxxx```的形式在require时必然会报错的；而是只能使用```exports.xxx = yyy```的赋值方式。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">错误示例：</div></pre></td></tr></table></figure></p>
<p>exports = nano = function database_module(cfg) {return;}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### <span class="keyword">module</span>.exports才能赋予属性外的值</div><div class="line"></div><div class="line">正确示例：</div></pre></td></tr></table></figure></p>
<p>module.exports = exports = nano = function database_module(cfg) {return;}<br>module.exports = ‘ROCK IT!’;<br>module.exports = [‘Lemmy Kilmister’, ‘Ozzy Osbourne’, ‘Ronnie James Dio’, ‘Steven Tyler’, ‘Mick Jagger’];<br>```</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://weizhifeng.net/node-js-exports-vs-module-exports.html" target="_blank" rel="external">Node.js中exports与module.exports的区别</a></li>
<li><a href="http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js" target="_blank" rel="external">module.exports vs exports in Node.js</a></li>
<li><a href="http://www.ghostchina.com/module-exports-and-exports-in-node-js/" target="_blank" rel="external">module.exports 与 exports</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HBASE测试环境安装部署]]></title>
      <url>http://oneblog.top/2016/06/08/infotech/bigdata/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/HBASE%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>HBASE集群安装需要使用到HDFS和ZOOKEEPER，这里作为开发环境的部署，仅使用HDFS，需要提前部署好HADOOP运行环境。</p>
<h2 id="HBASE安装部署（伪分布式）"><a href="#HBASE安装部署（伪分布式）" class="headerlink" title="HBASE安装部署（伪分布式）"></a>HBASE安装部署（伪分布式）</h2><h3 id="官网下载TAR包"><a href="#官网下载TAR包" class="headerlink" title="官网下载TAR包"></a>官网下载TAR包</h3><p>下载hbase-1.2.1-bin.tar.gz，解压移动到/opt目录</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>./conf/hbase-site.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://192.168.79.133:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：事先需要创建hdfs://192.168.79.133:9000/下的hbase目录</p>
</blockquote>
<h3 id="启动hbase"><a href="#启动hbase" class="headerlink" title="启动hbase"></a>启动hbase</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/opt/hbase-1.2.1<span class="comment"># ./bin/start-hbase.sh </span></div><div class="line">starting master, logging to /opt/hbase-1.2.1/bin/../logs/hbase-root-master-ubuntu.out</div></pre></td></tr></table></figure>
<p>jps查看启动进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/opt/hbase-1.2.1<span class="comment"># jps</span></div><div class="line">3303 Worker</div><div class="line">2823 DataNode</div><div class="line">4194 Jps</div><div class="line">3021 SecondaryNameNode</div><div class="line">3208 Master</div><div class="line">3838 HMaster    <span class="comment"># hbase进程</span></div><div class="line">2691 NameNode</div></pre></td></tr></table></figure>
<h3 id="使用hbase命令行交互"><a href="#使用hbase命令行交互" class="headerlink" title="使用hbase命令行交互"></a>使用hbase命令行交互</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/opt/hbase-1.2.1<span class="comment"># ./bin/hbase shell</span></div></pre></td></tr></table></figure>
<p>启动速度较慢，需耐心等待，启动后，可以执行list等命令进行交互操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SLF4J: Class path contains multiple SLF4J bindings.</div><div class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/opt/hbase-1.2.1/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/opt/hadoop-2.7.2/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#multiple_bindings for an explanation.</span></div><div class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.slf4j.impl.Log4jLoggerFactory]</div><div class="line">HBase Shell; enter <span class="string">'help&lt;RETURN&gt;'</span> <span class="keyword">for</span> list of supported commands.</div><div class="line">Type <span class="string">"exit&lt;RETURN&gt;"</span> to leave the HBase Shell</div><div class="line">Version 1.2.1, r8d8a7107dc4ccbf36a92f64675dc60392f85c015, Wed Mar 30 11:19:21 CDT 2016</div><div class="line"></div><div class="line">hbase(main):001:0&gt; list</div><div class="line">TABLE                  </div><div class="line">flumeinputdata2            </div><div class="line">1 row(s) <span class="keyword">in</span> 0.5190 seconds</div><div class="line"></div><div class="line">=&gt; [<span class="string">"flumeinputdata2"</span>]</div><div class="line">hbase(main):002:0&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hbase </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOOKEEPER测试环境安装部署]]></title>
      <url>http://oneblog.top/2016/06/08/infotech/bigdata/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/ZOOKEEPER%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h3 id="官网下载TAR包"><a href="#官网下载TAR包" class="headerlink" title="官网下载TAR包"></a>官网下载TAR包</h3><p>下载zookeeper-3.4.8.tar.gz，解压移动到/opt</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>从配置文件模板中复制，仅修改文件名称，无需修改内容（使用默认配置）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp ./conf/zoo_sample.cfg ./conf/zoo.cfg</div></pre></td></tr></table></figure>
<h3 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h3><p>./bin/zkServer.sh start</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/opt/zookeeper-3.4.8<span class="comment"># ./bin/zkServer.sh start</span></div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /opt/zookeeper-3.4.8/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KAFKA测试环境安装部署]]></title>
      <url>http://oneblog.top/2016/06/08/infotech/bigdata/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/KAFKA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h3 id="官网下载TAR包"><a href="#官网下载TAR包" class="headerlink" title="官网下载TAR包"></a>官网下载TAR包</h3><p>下载kafka_2.10-0.10.0.0.tgz，解压移动到/opt目录</p>
<h3 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h3><p>使用默认配置启动kafka</p>
<h4 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h4><p>如果zookeeper没有启动，kafka中也在其中集成了，可以直接在kafka中启动zookeeper</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/zookeeper-server-start.sh config/zookeeper.properties</div></pre></td></tr></table></figure>
<h4 id="启动kafka-1"><a href="#启动kafka-1" class="headerlink" title="启动kafka"></a>启动kafka</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/kafka-server-start.sh config/server.properties</div></pre></td></tr></table></figure>
<h3 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h3><h4 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>查看创建的topic</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/kafka-topics.sh --list --zookeeper localhost:2181</div></pre></td></tr></table></figure>
<h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></div><div class="line">This is a message</div><div class="line">This is another message</div></pre></td></tr></table></figure>
<h4 id="读取消息"><a href="#读取消息" class="headerlink" title="读取消息"></a>读取消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class="built_in">test</span> --from-beginning</div><div class="line">This is a message</div><div class="line">This is another message</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FLUME测试环境安装部署及使用]]></title>
      <url>http://oneblog.top/2016/06/08/infotech/bigdata/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/FLUME%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="Flume核心概念"><a href="#Flume核心概念" class="headerlink" title="Flume核心概念"></a>Flume核心概念</h2><ul>
<li>Agent<br>使用JVM 运行Flume。每台机器运行一个agent，但是可以在一个agent中包含多个sources和sinks。</li>
<li>Client<br>生产数据，运行在一个独立的线程。</li>
<li>Source<br>从Client收集数据，传递给Channel。</li>
<li>Sink<br>从Channel收集数据，运行在一个独立线程。</li>
<li>Channel<br>连接 sources 和 sinks ，这个有点像一个队列。</li>
<li>Events<br>可以是日志记录、 avro 对象等。</li>
</ul>
<h2 id="Flume安装部署"><a href="#Flume安装部署" class="headerlink" title="Flume安装部署"></a>Flume安装部署</h2><p>Flume只需要下载官方TAR包，根据需要配置即可使用。</p>
<h2 id="Flume配置案例"><a href="#Flume配置案例" class="headerlink" title="Flume配置案例"></a>Flume配置案例</h2><h3 id="监控本地文件变化增量读取并写入到远端服务器的HDFS文件"><a href="#监控本地文件变化增量读取并写入到远端服务器的HDFS文件" class="headerlink" title="监控本地文件变化增量读取并写入到远端服务器的HDFS文件"></a>监控本地文件变化增量读取并写入到远端服务器的HDFS文件</h3><h4 id="客户端配置文件"><a href="#客户端配置文件" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h4><p>./conf/flume-client.conf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clientMainAgent</span></div><div class="line">clientMainAgent.channels = c1</div><div class="line">clientMainAgent.sources  = s1</div><div class="line">clientMainAgent.sinks    = k1 k2</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent Spooling Directory Source</span></div><div class="line">clientMainAgent.sources.s1.type = spooldir</div><div class="line">clientMainAgent.sources.s1.spoolDir  = /opt/proxy/nginx/logs</div><div class="line">clientMainAgent.sources.s1.fileHeader = <span class="literal">true</span></div><div class="line">clientMainAgent.sources.s1.deletePolicy = immediate</div><div class="line">clientMainAgent.sources.s1.batchSize = 1000</div><div class="line">clientMainAgent.sources.s1.channels = c1</div><div class="line">clientMainAgent.sources.s1.deserializer.maxLineLength = 1048576</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent FileChannel</span></div><div class="line">clientMainAgent.channels.c1.type = file</div><div class="line">clientMainAgent.channels.c1.checkpointDir = /var/flume/client/fchannel/spool/checkpoint</div><div class="line">clientMainAgent.channels.c1.dataDirs = /var/flume/client/fchannel/spool/data</div><div class="line">clientMainAgent.channels.c1.capacity = 200000000</div><div class="line">clientMainAgent.channels.c1.keep-alive = 30</div><div class="line">clientMainAgent.channels.c1.write-timeout = 30</div><div class="line">clientMainAgent.channels.c1.checkpoint-timeout = 600</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent Sinks</span></div><div class="line"><span class="comment"># k1 sink</span></div><div class="line">clientMainAgent.sinks.k1.channel = c1</div><div class="line">clientMainAgent.sinks.k1.type = avro</div><div class="line"><span class="comment"># connect to CollectorMainAgent</span></div><div class="line">clientMainAgent.sinks.k1.hostname = 192.168.79.133</div><div class="line">clientMainAgent.sinks.k1.port = 41415 </div><div class="line"><span class="comment"># k2 sink</span></div><div class="line">clientMainAgent.sinks.k2.channel = c1</div><div class="line">clientMainAgent.sinks.k2.type = avro</div><div class="line"><span class="comment"># connect to CollectorBackupAgentz</span></div><div class="line">clientMainAgent.sinks.k2.hostname = 192.168.79.133</div><div class="line">clientMainAgent.sinks.k2.port = 41416</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent sinks group</span></div><div class="line">clientMainAgent.sinkgroups = g1</div><div class="line">clientMainAgent.sinkgroups.g1.sinks = k1 k2</div><div class="line"></div><div class="line"><span class="comment"># load_balance type</span></div><div class="line">clientMainAgent.sinkgroups.g1.processor.type = load_balance</div><div class="line">clientMainAgent.sinkgroups.g1.processor.backoff   = <span class="literal">true</span></div><div class="line">clientMainAgent.sinkgroups.g1.processor.selector  = random</div></pre></td></tr></table></figure>
<h4 id="启动客户端程序"><a href="#启动客户端程序" class="headerlink" title="启动客户端程序"></a>启动客户端程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/flume-ng agent --conf ./conf/ <span class="_">-f</span> ./conf/flume-client.conf -n clientMainAgent -Dflume.root.logger=DEBUG,console</div></pre></td></tr></table></figure>
<h4 id="服务端配置文件"><a href="#服务端配置文件" class="headerlink" title="服务端配置文件"></a>服务端配置文件</h4><p>./conf/flume-server.conf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># collectorMainAgent</span></div><div class="line">collectorMainAgent.channels = c2</div><div class="line">collectorMainAgent.sources  = s2</div><div class="line">collectorMainAgent.sinks    =k1 k2</div><div class="line"></div><div class="line"><span class="comment"># collectorMainAgent AvroSource</span></div><div class="line"><span class="comment">#</span></div><div class="line">collectorMainAgent.sources.s2.type = avro</div><div class="line">collectorMainAgent.sources.s2.bind = 192.168.79.133</div><div class="line">collectorMainAgent.sources.s2.port = 41415</div><div class="line">collectorMainAgent.sources.s2.channels = c2</div><div class="line"></div><div class="line"><span class="comment"># collectorMainAgent FileChannel</span></div><div class="line"><span class="comment">#</span></div><div class="line">collectorMainAgent.channels.c2.type = file</div><div class="line">collectorMainAgent.channels.c2.checkpointDir = /var/flume/server01/fchannel/spool/checkpoint</div><div class="line">collectorMainAgent.channels.c2.dataDirs = /var/flume/server01/one/fchannel/spool/data,/var/flume/server01/two/fchannel/spool/data</div><div class="line">collectorMainAgent.channels.c2.capacity = 200000000</div><div class="line">collectorMainAgent.channels.c2.transactionCapacity=6000</div><div class="line">collectorMainAgent.channels.c2.checkpointInterval=60000</div><div class="line"><span class="comment"># collectorMainAgent hdfsSink</span></div><div class="line">collectorMainAgent.sinks.k2.type = hdfs</div><div class="line">collectorMainAgent.sinks.k2.channel = c2</div><div class="line">collectorMainAgent.sinks.k2.hdfs.path = hdfs://192.168.79.133:9000/user/hadoop/flume%&#123;dir&#125;</div><div class="line">collectorMainAgent.sinks.k2.hdfs.filePrefix =k2_%&#123;file&#125;</div><div class="line">collectorMainAgent.sinks.k2.hdfs.inUsePrefix =_</div><div class="line">collectorMainAgent.sinks.k2.hdfs.inUseSuffix =.tmp</div><div class="line">collectorMainAgent.sinks.k2.hdfs.rollSize = 0</div><div class="line">collectorMainAgent.sinks.k2.hdfs.rollCount = 0</div><div class="line">collectorMainAgent.sinks.k2.hdfs.rollInterval = 240</div><div class="line">collectorMainAgent.sinks.k2.hdfs.writeFormat = Text</div><div class="line">collectorMainAgent.sinks.k2.hdfs.fileType = DataStream</div><div class="line">collectorMainAgent.sinks.k2.hdfs.batchSize = 6000</div><div class="line">collectorMainAgent.sinks.k2.hdfs.callTimeout = 60000</div><div class="line">collectorMainAgent.sinks.k1.type = hdfs</div><div class="line">collectorMainAgent.sinks.k1.channel = c2</div><div class="line">collectorMainAgent.sinks.k1.hdfs.path = hdfs://192.168.79.133:9000/user/hadoop/flume%&#123;dir&#125;</div><div class="line">collectorMainAgent.sinks.k1.hdfs.filePrefix =k1_%&#123;file&#125;</div><div class="line">collectorMainAgent.sinks.k1.hdfs.inUsePrefix =_</div><div class="line">collectorMainAgent.sinks.k1.hdfs.inUseSuffix =.tmp</div><div class="line">collectorMainAgent.sinks.k1.hdfs.rollSize = 0</div><div class="line">collectorMainAgent.sinks.k1.hdfs.rollCount = 0</div><div class="line">collectorMainAgent.sinks.k1.hdfs.rollInterval = 240</div><div class="line">collectorMainAgent.sinks.k1.hdfs.writeFormat = Text</div><div class="line">collectorMainAgent.sinks.k1.hdfs.fileType = DataStream</div><div class="line">collectorMainAgent.sinks.k1.hdfs.batchSize = 6000</div><div class="line">collectorMainAgent.sinks.k1.hdfs.callTimeout = 60000</div></pre></td></tr></table></figure>
<h4 id="启动服务端程序"><a href="#启动服务端程序" class="headerlink" title="启动服务端程序"></a>启动服务端程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/flume-ng agent --conf ./conf/ <span class="_">-f</span> ./conf/flume-server.conf -n collectorMainAgent -Dflume.root.logger=DEBUG,console</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> flume </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spark读写msyql]]></title>
      <url>http://oneblog.top/2016/06/02/infotech/bigdata/spark%E8%AF%BB%E5%86%99mysql/</url>
      <content type="html"><![CDATA[<p>参考文档 <a href="http://alvinalexander.com/scala/scala-jdbc-connection-mysql-sql-select-example" target="_blank" rel="external">http://alvinalexander.com/scala/scala-jdbc-connection-mysql-sql-select-example</a></p>
<p>运行以下代码，需要先导入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```scala</div><div class="line">package jdbc</div><div class="line"> </div><div class="line">import java.sql.DriverManager</div><div class="line">import java.sql.Connection</div><div class="line"> </div><div class="line">/**</div><div class="line"> * A Scala JDBC connection example by Alvin Alexander,</div><div class="line"> * &lt;a href=&quot;http://alvinalexander.com&quot; title=&quot;http://alvinalexander.com&quot;&gt;http://alvinalexander.com&lt;/a&gt;</div><div class="line"> */</div><div class="line">object ScalaJdbcConnectSelect &#123;</div><div class="line"> </div><div class="line">  def main(args: Array[String]) &#123;</div><div class="line">    // connect to the database named &quot;mysql&quot; on the localhost</div><div class="line">    val driver = &quot;com.mysql.jdbc.Driver&quot;</div><div class="line">    val url = &quot;jdbc:mysql://localhost/mysql&quot;</div><div class="line">    val username = &quot;root&quot;</div><div class="line">    val password = &quot;mysql&quot;</div><div class="line"> </div><div class="line">    // there&apos;s probably a better way to do this</div><div class="line">    var connection:Connection = null</div><div class="line"> </div><div class="line">    try &#123;</div><div class="line">      // make the connection</div><div class="line">      Class.forName(driver)</div><div class="line">      connection = DriverManager.getConnection(url, username, password)</div><div class="line"> </div><div class="line">      // create the statement, and run the select query</div><div class="line">      val statement = connection.createStatement()</div><div class="line">      val resultSet = statement.executeQuery(&quot;SELECT openid, login FROM spark.users&quot;)</div><div class="line">      while ( resultSet.next() ) &#123;</div><div class="line">        val openid = resultSet.getString(&quot;openid&quot;)</div><div class="line">        val login = resultSet.getString(&quot;login&quot;)</div><div class="line">        println(&quot;openid, login = &quot; + openid + &quot;, &quot; + login)</div><div class="line">      &#125;</div><div class="line">    &#125; catch &#123;</div><div class="line">      case e =&gt; e.printStackTrace</div><div class="line">    &#125;</div><div class="line">    connection.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[spark和外部数据源]]></title>
      <url>http://oneblog.top/2016/06/01/infotech/bigdata/spark%E5%92%8C%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>As of Spark 1.3, Spark SQL Data sources API is the preferred way to loading data from external data sources. </p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04使用root用户登录桌面]]></title>
      <url>http://oneblog.top/2016/05/30/infotech/linux/UBuntu/Ubuntu14.04%E4%BD%BF%E7%94%A8root%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%A1%8C%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>Ubuntu14.04桌面版，默认是不能使用root用户登录的。</p>
<p>如果确实需要root用户登录，在启用root账户之后，按照以下内容修改指定文件后，重启即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># vi root@ubuntu:~# cat /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span></div><div class="line"></div><div class="line">[SeatDefaults]</div><div class="line">autologin-user=root</div><div class="line">user-session=ubuntu</div><div class="line">greeter-show-manual-login=<span class="literal">true</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Zookeeper精要]]></title>
      <url>http://oneblog.top/2016/05/26/infotech/bigdata/ZOOKEEPER%E7%B2%BE%E8%A6%81/</url>
      <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Zookeeper 分布式服务框架是 Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>
<p>Zookeeper 从设计模式角度来看，是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper 就将负责通知已经在 Zookeeper 上注册的那些观察者做出相应的反应，从而实现集群中类似 Master/Slave 管理模式。</p>
<p>Zookeeper 不仅能够帮你维护当前的集群中机器的服务状态，而且能够帮你选出一个“总管”，让这个总管来管理集群，这就是 Zookeeper 的另一个功能 Leader Election。</p>
<p>Zookeeper 作为 Hadoop 项目中的一个子项目，是 Hadoop 集群管理的一个必不可少的模块，它主要用来控制集群中的数据，如它管理 Hadoop 集群中的 NameNode，还有 Hbase 中 Master Election、Server 之间状态同步等。</p>
<h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><p>单机部署很简单，解压后，将conf目录下的zoo_sample.cfg复制成zoo.cfg（使用默认配置即可），运行命令bin/zkServer.sh start即可。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="external">分布式服务框架 Zookeeper</a><br><a href="https://taoistwar.gitbooks.io/spark-operationand-maintenance-management/content/spark_relate_software/zookeeper_install.html" target="_blank" rel="external">ZooKeeper安装配置</a><br><a href="http://coolxing.iteye.com/blog/1871009" target="_blank" rel="external">Zookeeper安装和配置</a></p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KAFKA精要]]></title>
      <url>http://oneblog.top/2016/05/25/infotech/bigdata/KAFKA%E7%B2%BE%E8%A6%81/</url>
      <content type="html"><![CDATA[<p>Kafka是一种分布式的，基于发布/订阅的消息系统。</p>
<p>单机部署启动，参考<a href="http://kafka.apache.org/documentation.html" target="_blank" rel="external">官方文档</a>的Quick Start即可。在Quick Start中包括了启动（），创建topic，向topic中添加数据，从topic中读取数据（9020端口）等操作。</p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flume精要]]></title>
      <url>http://oneblog.top/2016/05/25/infotech/bigdata/FLUME%E7%B2%BE%E8%A6%81/</url>
      <content type="html"><![CDATA[<p>参考文档</p>
<p><a href="http://my.oschina.net/leejun2005/blog/288136" target="_blank" rel="external">Flume NG 简介及配置实战</a> 对于基本概念和入手操作讲解的很好</p>
<p>多参考官方User Guide，大多数配置都有详细说明</p>
<p>client</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clientMainAgent</span></div><div class="line">clientMainAgent.channels = c1</div><div class="line">clientMainAgent.sources  = s1</div><div class="line">clientMainAgent.sinks    = k1 k2</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent Spooling Directory Source</span></div><div class="line">clientMainAgent.sources.s1.type = spooldir</div><div class="line">clientMainAgent.sources.s1.spoolDir  = /opt/proxy/nginx/logs</div><div class="line">clientMainAgent.sources.s1.fileHeader = <span class="literal">true</span></div><div class="line">clientMainAgent.sources.s1.deletePolicy = immediate</div><div class="line">clientMainAgent.sources.s1.batchSize = 1000</div><div class="line">clientMainAgent.sources.s1.channels = c1</div><div class="line">clientMainAgent.sources.s1.deserializer.maxLineLength = 1048576</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent FileChannel</span></div><div class="line">clientMainAgent.channels.c1.type = file</div><div class="line">clientMainAgent.channels.c1.checkpointDir = /var/flume/client/fchannel/spool/checkpoint</div><div class="line">clientMainAgent.channels.c1.dataDirs = /var/flume/client/fchannel/spool/data</div><div class="line">clientMainAgent.channels.c1.capacity = 200000000</div><div class="line">clientMainAgent.channels.c1.keep-alive = 30</div><div class="line">clientMainAgent.channels.c1.write-timeout = 30</div><div class="line">clientMainAgent.channels.c1.checkpoint-timeout = 600</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent Sinks</span></div><div class="line"><span class="comment"># k1 sink</span></div><div class="line">clientMainAgent.sinks.k1.channel = c1</div><div class="line">clientMainAgent.sinks.k1.type = avro</div><div class="line"><span class="comment"># connect to CollectorMainAgent</span></div><div class="line">clientMainAgent.sinks.k1.hostname = 192.168.79.133</div><div class="line">clientMainAgent.sinks.k1.port = 41415 </div><div class="line"><span class="comment"># k2 sink</span></div><div class="line">clientMainAgent.sinks.k2.channel = c1</div><div class="line">clientMainAgent.sinks.k2.type = avro</div><div class="line"><span class="comment"># connect to CollectorBackupAgentz</span></div><div class="line">clientMainAgent.sinks.k2.hostname = 192.168.79.133</div><div class="line">clientMainAgent.sinks.k2.port = 41416</div><div class="line"></div><div class="line"><span class="comment"># clientMainAgent sinks group</span></div><div class="line">clientMainAgent.sinkgroups = g1</div><div class="line">clientMainAgent.sinkgroups.g1.sinks = k1 k2</div><div class="line"></div><div class="line"><span class="comment"># load_balance type</span></div><div class="line">clientMainAgent.sinkgroups.g1.processor.type = load_balance</div><div class="line">clientMainAgent.sinkgroups.g1.processor.backoff   = <span class="literal">true</span></div><div class="line">clientMainAgent.sinkgroups.g1.processor.selector  = random</div></pre></td></tr></table></figure>
<p>server</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># collectorMainAgent</span></div><div class="line">collectorMainAgent.channels = c2</div><div class="line">collectorMainAgent.sources  = s2</div><div class="line">collectorMainAgent.sinks    =k1 k2</div><div class="line"></div><div class="line"><span class="comment"># collectorMainAgent AvroSource</span></div><div class="line"><span class="comment">#</span></div><div class="line">collectorMainAgent.sources.s2.type = avro</div><div class="line">collectorMainAgent.sources.s2.bind = 192.168.79.133</div><div class="line">collectorMainAgent.sources.s2.port = 41415</div><div class="line">collectorMainAgent.sources.s2.channels = c2</div><div class="line"></div><div class="line"><span class="comment"># collectorMainAgent FileChannel</span></div><div class="line"><span class="comment">#</span></div><div class="line">collectorMainAgent.channels.c2.type = file</div><div class="line">collectorMainAgent.channels.c2.checkpointDir = /var/flume/server01/fchannel/spool/checkpoint</div><div class="line">collectorMainAgent.channels.c2.dataDirs = /var/flume/server01/one/fchannel/spool/data,/var/flume/server01/two/fchannel/spool/data</div><div class="line">collectorMainAgent.channels.c2.capacity = 200000000</div><div class="line">collectorMainAgent.channels.c2.transactionCapacity=6000</div><div class="line">collectorMainAgent.channels.c2.checkpointInterval=60000</div><div class="line"><span class="comment"># collectorMainAgent hdfsSink</span></div><div class="line">collectorMainAgent.sinks.k2.type = hdfs</div><div class="line">collectorMainAgent.sinks.k2.channel = c2</div><div class="line">collectorMainAgent.sinks.k2.hdfs.path = hdfs://192.168.79.133:9000/user/hadoop/flume%&#123;dir&#125;</div><div class="line">collectorMainAgent.sinks.k2.hdfs.filePrefix =k2_%&#123;file&#125;</div><div class="line">collectorMainAgent.sinks.k2.hdfs.inUsePrefix =_</div><div class="line">collectorMainAgent.sinks.k2.hdfs.inUseSuffix =.tmp</div><div class="line">collectorMainAgent.sinks.k2.hdfs.rollSize = 0</div><div class="line">collectorMainAgent.sinks.k2.hdfs.rollCount = 0</div><div class="line">collectorMainAgent.sinks.k2.hdfs.rollInterval = 240</div><div class="line">collectorMainAgent.sinks.k2.hdfs.writeFormat = Text</div><div class="line">collectorMainAgent.sinks.k2.hdfs.fileType = DataStream</div><div class="line">collectorMainAgent.sinks.k2.hdfs.batchSize = 6000</div><div class="line">collectorMainAgent.sinks.k2.hdfs.callTimeout = 60000</div><div class="line">collectorMainAgent.sinks.k1.type = hdfs</div><div class="line">collectorMainAgent.sinks.k1.channel = c2</div><div class="line">collectorMainAgent.sinks.k1.hdfs.path = hdfs://192.168.79.133:9000/user/hadoop/flume%&#123;dir&#125;</div><div class="line">collectorMainAgent.sinks.k1.hdfs.filePrefix =k1_%&#123;file&#125;</div><div class="line">collectorMainAgent.sinks.k1.hdfs.inUsePrefix =_</div><div class="line">collectorMainAgent.sinks.k1.hdfs.inUseSuffix =.tmp</div><div class="line">collectorMainAgent.sinks.k1.hdfs.rollSize = 0</div><div class="line">collectorMainAgent.sinks.k1.hdfs.rollCount = 0</div><div class="line">collectorMainAgent.sinks.k1.hdfs.rollInterval = 240</div><div class="line">collectorMainAgent.sinks.k1.hdfs.writeFormat = Text</div><div class="line">collectorMainAgent.sinks.k1.hdfs.fileType = DataStream</div><div class="line">collectorMainAgent.sinks.k1.hdfs.batchSize = 6000</div><div class="line">collectorMainAgent.sinks.k1.hdfs.callTimeout = 60000</div></pre></td></tr></table></figure>
<p>启动命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 单节点配置</span></div><div class="line">./bin/flume-ng agent --conf ./conf/ --conf-file ./conf/flume-single.conf --name a1 -Dflume.root.logger=INFO,console</div><div class="line"><span class="comment"># 单节点配置（写入HDFS）</span></div><div class="line">./bin/flume-ng agent --conf ./conf/ <span class="_">-f</span> ./conf/flume-writetohdfs.conf -n agent1 -Dflume.root.logger=INFO,console</div><div class="line"><span class="comment"># 客户端配置</span></div><div class="line">./bin/flume-ng agent --conf ./conf/ <span class="_">-f</span> ./conf/flume-client.conf -n clientMainAgent -Dflume.root.logger=DEBUG,console</div><div class="line"><span class="comment"># 服务端配置</span></div><div class="line">./bin/flume-ng agent --conf ./conf/ <span class="_">-f</span> ./conf/flume-server.conf -n collectorMainAgent -Dflume.root.logger=DEBUG,console</div></pre></td></tr></table></figure>
<p>the serializer is a class that converts the Flume Event into an HBase-friendly format.</p>
<p>官方文档<br><a href="https://blogs.apache.org/flume/entry/streaming_data_into_apache_hbase" target="_blank" rel="external">Streaming data into Apache HBase using Apache Flume</a><br>参考文档<br><a href="http://www.aboutyun.com/thread-7912-1-1.html" target="_blank" rel="external">Flume-ng将数据插入hdfs与HBase-0.96.0</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">agent1.sinks.log-sink1.channel = ch1</div><div class="line">agent1.sinks.log-sink1.type = org.apache.flume.sink.hbase.AsyncHBaseSink</div><div class="line">agent1.sinks.log-sink1.table = flume</div><div class="line">agent1.sinks.log-sink1.columnFamily = logs</div><div class="line">agent1.sinks.log-sink1.column = info</div><div class="line">agent1.sinks.log-sink1.serializer = org.apache.flume.sink.hbase.SimpleAsyncHbaseEventSerializer</div></pre></td></tr></table></figure>
<p>遭遇问题</p>
<p>2016-05-26 10:31:57,450 (conf-file-poller-0) [ERROR - org.apache.flume.node.PollingPropertiesFileConfigurationProvider$FileWatcherRunnable.run(PollingPropertiesFileConfigurationProvider.java:145)] Failed to start agent because dependencies were not found in classpath. Error follows.<br>java.lang.NoClassDefFoundError: org/apache/hadoop/hbase/HBaseConfiguration<br>    at org.apache.flume.sink.hbase.AsyncHBaseSink.configure(AsyncHBaseSink.java:393)<br>    at org.apache.flume.conf.Configurables.configure(Configurables.java:41)<br>    at org.apache.flume.node.AbstractConfigurationProvider.loadSinks(AbstractConfigurationProvider.java:413)<br>    at org.apache.flume.node.AbstractConfigurationProvider.getConfiguration(AbstractConfigurationProvider.java:98)<br>    at org.apache.flume.node.PollingPropertiesFileConfigurationProvider$FileWatcherRunnable.run(PollingPropertiesFileConfigurationProvider.java:140)<br>    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)<br>    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)<br>    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)<br>    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)<br>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)<br>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)<br>    at java.lang.Thread.run(Thread.java:745)</p>
<p>在./conf/flume-env.sh中加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">问题参考</div><div class="line">[Flume to HBase dependencie failure](http://stackoverflow.com/questions/28600781/flume-to-hbase-dependencie-failure)</div><div class="line">[Flume agent failed because dependencies were not found in classpath.](https://community.hortonworks.com/questions/22067/flume-agent-failed-because-dependencies-were-not-f.html)</div><div class="line"></div><div class="line"></div><div class="line">如果需要控制如何拆分字段到hbase指定的字段，则需要自行编写serializer代码HbaseEventSerializer类，在apache-flume-1.6.1-src/flume-ng-sinks/flume-ng-hbase-sink/src/main/java中定义自己的类，实现flume中的HbaseEventSerializer接口，需要重新编译来实现。</div><div class="line"></div><div class="line"></div><div class="line">## flume和kafka</div><div class="line"></div><div class="line">在flume 1.6中，才正式集成了flume-kafka插件（https://github.com/thilinamb/flume-ng-kafka-sink）</div></pre></td></tr></table></figure></p>
<h1 id="kafka作为sink的配置"><a href="#kafka作为sink的配置" class="headerlink" title="kafka作为sink的配置"></a>kafka作为sink的配置</h1><p>a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink<br>a1.sinks.k1.topic = mytopic<br>a1.sinks.k1.brokerList = localhost:9092<br>a1.sinks.k1.requiredAcks = 1<br>a1.sinks.k1.batchSize = 20<br>a1.sinks.k1.channel = c1<br>```</p>
<h3 id="CDH相关配置"><a href="#CDH相关配置" class="headerlink" title="CDH相关配置"></a>CDH相关配置</h3><p>参考文档 </p>
<ul>
<li><a href="http://blog.cloudera.com/blog/2014/11/flafka-apache-flume-meets-apache-kafka-for-event-processing/" target="_blank" rel="external">Flafka: Apache Flume Meets Apache Kafka for Event Processing</a></li>
<li><a href="http://www.cloudera.com/documentation/kafka/latest/topics/kafka_flume.html" target="_blank" rel="external">Using Kafka with Flume</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> flume </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDFS精要]]></title>
      <url>http://oneblog.top/2016/05/25/infotech/bigdata/HDFS%E7%B2%BE%E8%A6%81/</url>
      <content type="html"><![CDATA[<p>首先用户启动hdfs的守护进程的时候，那个用户就被归属为supergroup，这个supergroup用户当当与root用户，能够删除hdfs上面的所有文件，所以如果你的hdfs上面存储了比如hbase的数据信息，有这么一个超级用户存在，的确是比较危险的。 </p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hdfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[艾灸]]></title>
      <url>http://oneblog.top/2016/05/24/life/%E4%B8%AD%E5%8C%BB%E5%85%BB%E7%94%9F/%E8%89%BE%E7%81%B8/</url>
      <content type="html"><![CDATA[<p>大人艾灸足三里，可保健脾胃，小儿不可，影响其生长发育。</p>
<p>艾灸治疗糖尿病、高血脂、颈椎病、过敏性鼻炎、扁桃体炎，有良好疗效</p>
<p>艾灸可以提高免疫力，关元穴、中脘穴、足三里、神阙穴（肚脐）</p>
<p>治疗疾病，上午较好，10~11点阳气生发之时，对于大多数上班族，只能是闲时最好，要心安神静，效果才好</p>
<p>南怀瑾肚脐贴（桂圆+花椒+艾绒） 艾灸（艾灸贴） 三伏贴</p>
<p>小儿是否适合以上几种调理方法，足三里是否适合小儿艾灸</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[scala编程中文版]]></title>
      <url>http://oneblog.top/2016/05/23/books/scala%E7%BC%96%E7%A8%8B%E7%B2%BE%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>scala特点：面向对象、函数式、兼容Java、简洁、高级（代码复杂性）、静态类型</p>
<p>scala解释器</p>
<p>变量定义，scala具有类型推断的能力，即根据输入的value判断变量的类型，但是类型一旦设定就不能改变？所谓静态类型；</p>
<p>val设置的变量一旦初始化则不能再被修改，</p>
<p>以下写法结果相同：<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> msg = <span class="string">"Hello world"</span></div><div class="line"><span class="keyword">val</span> msg: String = <span class="string">"Hello world"</span></div><div class="line"><span class="keyword">val</span> msg: java.lang.String = <span class="string">"Hello world"</span></div></pre></td></tr></table></figure></p>
<p>函数定义</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(<span class="symbol">x:</span> Int, <span class="symbol">y:</span> Int)</span></span>: Int = &#123;</div><div class="line">    <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(<span class="symbol">x:</span> Int, <span class="symbol">y:</span> Int)</span></span>: Int = <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">()</span></span> = println(<span class="string">"Hello world"</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">()</span></span>: Unit = println(<span class="string">"Hello world"</span>)</div></pre></td></tr></table></figure>
<p>scala脚本 args args(0)</p>
<p>函数式编程风格</p>
<figure class="highlight golo"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">args.<span class="keyword">foreach</span>(arg =&gt; <span class="keyword">println</span>(arg))</div><div class="line">args.<span class="keyword">foreach</span>((arg: String) =&gt; <span class="keyword">println</span>(arg))</div><div class="line">args.<span class="keyword">foreach</span>(<span class="keyword">println</span>)</div></pre></td></tr></table></figure>
<p>类型参数化数组</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">val greetStrings = new Array[<span class="string">String</span>](<span class="link">3</span>)</div><div class="line">greetStrings(0) = "Hello"</div></pre></td></tr></table></figure>
<p>greetStrings作为new Array<a href="3">String</a>不能被修改，但是可以给数组元素赋值</p>
<p>Array：元素在物理上连续存储；<br>List：元素在物理上的存储靠链表连接<br>元组：存储不同类型的元素，比如作为函数返回值<br>Set：唯一元素？<br>Map：key-value</p>
<p>函数式编程：没有副作用（println就是副作用之一）或var的函数</p>
<figure class="highlight flix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不推荐</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printArgs</span></span>(args: Array[String]): Unit = &#123;</div><div class="line">    args.foreach(println)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 推荐</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatArgs</span></span>(args: Array[String]) = args.mkString(<span class="string">"\n"</span>)</div><div class="line">println(formatArgs(args))</div></pre></td></tr></table></figure>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChecksumAccumulator</span> &#123;</span></div><div class="line">    private var sum = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(<span class="symbol">b:</span> Byte)</span></span> &#123; sum += b &#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checksum</span><span class="params">()</span></span>: Int = ~(sum &amp; <span class="number">0xFF</span>) + <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># 同一文件里，单例对象与某个类共享同一个名称，则其被成为伴生对象</span></div><div class="line"><span class="comment"># 伴生对象主要用于实现静态方法</span></div><div class="line">object ChecksumAccumulator &#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(<span class="symbol">s:</span> String)</span></span>: Int = &#123;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>独立运行的scala程序，必须是object带有main方法，如下</p>
<p>Summer.scala</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Summer</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    println(<span class="string">"object Summer"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Scala提供了特质scala.Application，可以减少一些输入工作，比如以下代码减少了main函数的定义，但也带来了两个限制，如下：</p>
<ul>
<li>无法访问命令行参数（因为args数组不可访问了）</li>
<li>对于多线程程序需要自行编写main方法</li>
<li>某些JVM的实现没有优化被Application特质执行的对象的初始化代码</li>
</ul>
<p>所以，只有当程序相对简单，并且是单线程情况下，才可以继承Application特质。</p>
<p>ExtendApp.scala</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ExtendApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  println(<span class="string">"object ExtendApp"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> scala </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写给程序员的数据挖掘实践指南]]></title>
      <url>http://oneblog.top/2016/05/23/books/%E5%86%99%E7%BB%99%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h2 id="基于物品属性的过滤"><a href="#基于物品属性的过滤" class="headerlink" title="基于物品属性的过滤"></a>基于物品属性的过滤</h2><h3 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h3><p>前两章节中的协同过滤算法，采用了基于用户和基于物品的过滤，使用了用户显式评级或隐式评级的数据，因为必须有用户对物品的评分或者购买记录才有可能纳入计算范围，所以对于全新的物品（没有评级过或购买过），可能永远不会被推荐（推荐系统的“冷启动”问题），为解决这个问题，引入基于物品属性的过滤算法。</p>
<h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>由专业人士对物品提取特征集（或称作物品属性或物品基因），然后为每件物品设置特征集中每个特征的权重。</p>
<p>比如，为歌曲设置特征集，包括Country、Jazz、Soul、Rap、Rock五种特征，之后为每首歌曲设置这五个特征的权重，如下：</p>
<table>
<thead>
<tr>
<th>-</th>
<th style="text-align:center">Country</th>
<th style="text-align:center">Jazz</th>
<th style="text-align:right">Soul</th>
<th style="text-align:center">Rap</th>
<th style="text-align:right">Rock</th>
</tr>
</thead>
<tbody>
<tr>
<td>Song1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:right">4</td>
<td style="text-align:center">2.5</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td>Song2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2.5</td>
<td style="text-align:right">1.5</td>
<td style="text-align:center">3.5</td>
<td style="text-align:right">1.5</td>
</tr>
<tr>
<td>Song3</td>
<td style="text-align:center">2.5</td>
<td style="text-align:center">1.5</td>
<td style="text-align:right">3.5</td>
<td style="text-align:center">2.5</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td>Song4</td>
<td style="text-align:center">1.5</td>
<td style="text-align:center">0.5</td>
<td style="text-align:right">2</td>
<td style="text-align:center">3</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td>Song5</td>
<td style="text-align:center">4.5</td>
<td style="text-align:center">5</td>
<td style="text-align:right">3.5</td>
<td style="text-align:center">4</td>
<td style="text-align:right">4</td>
</tr>
</tbody>
</table>
<p>要注意特征集的设置，一个不好的特征集，可能会造成计算结果总是偏向某种特性。比如，如果设置了特征是类型type，其中的权重是Country=1、Jazz=2、Soul=3、Rap=4、Rock=5，（而不是设置特征Country=1~5、Jazz=1~5、Soul=1~5、Rap=1~5、Rock=1~5），这样就糟糕了。</p>
<h4 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h4><p>分类器是一个利用对象属性判定对象属于哪个组或类别的程序！书中提到的分类器用途包括：</p>
<ul>
<li>Twitter情感分类</li>
<li>照片中任务自动识别（脸部特征运用）</li>
<li>定向市场营销（市场分类）</li>
<li>健康及量化自我</li>
<li>判断人们是否恐怖分子</li>
<li>邮件自动分类（垃圾邮件提取）</li>
<li>识别金融诈骗（如信用卡欺诈）</li>
</ul>
<p>这里又提到了分类器算法，用于将歌曲划分到喜欢和不喜欢的组里去，这和K近邻算法有什么不同？</p>
<p>注意其中提到的分类器的用途，值得关注！</p>
<h4 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h4><p>不使用归一化 vs 归一化一般方法 vs 改进标准分数方法的归一化 ？ （精确率对比）</p>
<h2 id="算法评估"><a href="#算法评估" class="headerlink" title="算法评估"></a>算法评估</h2><h3 id="10折交叉验证"><a href="#10折交叉验证" class="headerlink" title="10折交叉验证"></a>10折交叉验证</h3><p>将数据集随机分成10份，使用其中9份进行训练，使用剩下的1份作为测试集；循环重复10次，使得每次的训练集和测试集都不同，最终求得平均值，作为精确率的结果。</p>
<blockquote>
<p>在机器学习领域，N折交叉验证被成为留一法。留一法可能适用于小数据集。目前为止，10折交叉测试是最流行的选择。</p>
<p>N折交叉验证的具体算法是，数据集有1000个实例时，使用999个实例作为训练集，使用剩下的1个实例作为测试集，循环重复1000次。所谓留一法，就是留下最后一个作为测试集的意思。所以留一法的结果是确定的，不会改变的。但代价是计算时间过长。</p>
<p>在N/M折交叉验证中，如果随机划分的数据有所不同的话，得到的准确率结果也会不同。</p>
</blockquote>
<h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><p>用于计算分类器算法的准确度，比如某个分类器算法，在给出的300个样本中，预测正确了其中的260个，则该算法的准确度是180/300=60%</p>
<h3 id="Kappa统计量"><a href="#Kappa统计量" class="headerlink" title="Kappa统计量"></a>Kappa统计量</h3><p>在得出分类器算法精确度的基础上，根据随机分类器精确度，判断当前分类器的精确程度。比如上例中，算法准确度是60%，那么这60%意味着这个分类器算法到底是好还是不好呢，这就是Kappa统计量的用途。</p>
<p>Kappa统计量，比较的是当前分类器算法和随机分类器算法之间的性能差异。</p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spark计算模型和工作机制]]></title>
      <url>http://oneblog.top/2016/05/17/infotech/bigdata/spark%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>Spark站在巨人的肩膀上，依靠Scala强有力的函数式编程、Actor通信模式、闭包、容器、泛型，借助统一资源分配调度框架Mesos，融合了MapReduce和Dryad，最后产生了一个简洁、直观、灵活、高效的大数据分布式处理框架。</p>
<blockquote>
<p>与Hadoop不同，Spark一开始就瞄准性能，将数据（包括部分中间数据）放在内存，在内存中计算。用户将重复利用的数据缓存到内存，提高下次的计算效率，因此Spark尤其适合迭代型和交互型任务。Spark需要大量的内存，但性能可随着机器数目呈多线性增长。</p>
</blockquote>
<p>RDD操作起来与Scala集合类型没有太大差别，这就是Spark追求的目标：像编写单机程序一样编写分布式程序，但它们的数据和运行模型有很大的不同，用户需要具备更强的系统把控能力和分布式系统知识。</p>
<p>用户程序对RDD通过多个函数进行操作，将RDD进行转换。Block-Manager管理RDD的物理分区，每个Block就是节点上对应的一个数据块，可以存储在内存或者磁盘。而RDD中的partition是一个逻辑数据块，对应相应的物理块Block。本质上一个RDD在代码中相当于是数据的一个元数据结构，存储着数据分区及其逻辑结构映射关系，存储着RDD之前的依赖转换关系。</p>
<p>（1）RDD的两种创建方式<br>1）从Hadoop文件系统（或与Hadoop兼容的其他持久化存储系统，如Hive、<br>Cassandra、Hbase）输入（如HDFS）创建。<br>2）从父RDD转换得到新的RDD。<br>（2）RDD的两种操作算子<br>对于RDD可以有两种计算操作算子：Transformation（变换）与Action（行动）。<br>1）Transformation（变换）。<br>Transformation操作是延迟计算的，也就是说从一个RDD转换生成另一个RDD的转换操<br>作不是马上执行，需要等到有Actions操作时，才真正触发运算。<br>2）Action（行动）<br>Action算子会触发Spark提交作业（Job），并将数据输出到Spark系统。<br>（3）RDD的重要内部属性<br>1）分区列表。<br>2）计算每个分片的函数<br>3）对父RDD的依赖列表。<br>4）对Key-Value对数据类型RDD的分区器，控制分区策略和分区数。<br>5）每个数据分区的地址列表（如HDFS上的数据块的地址）。</p>
<p>与DSM相比，RDD模型有两个优势。第一，对于RDD中的批量操作，运行时将根据数据<br>存放的位置来调度任务，从而提高性能。第二，对于扫描类型操作，如果内存不足以缓存整个RDD，就进行部分缓存，将内存容纳不下的分区存储到磁盘上。<br>另外，RDD支持粗粒度和细粒度的读操作。RDD上的很多函数操作（如count和collect等）都是批量读操作，即扫描整个数据集，可以将任务分配到距离数据最近的节点上。同时，RDD也支持细粒度操作，即在哈希或范围分区的RDD上执行关键字查找。</p>
<p>在Transformations算子中再将数据类型维度细分为：Value数据类型和Key-Value对数据类型的Transformations算子。Value型数据的算子封装在RDD类中可以直接使用，Key-<br>Value对数据类型的算子封装于PairRDDFunctions类中，用户需要引入import org.apache.spark.SparkContext._才能够使用。进行这样的细分是由于不同的数据类型处理思想不太一样，同时有些算子是不同的。</p>
<p>在物理上，RDD对象实质上是一个元数据结构，存储着Block、Node等的映射关系，以及其他的元数据信息。一个RDD就是一组分区，在物理数据存储上，RDD的每个分区对应的就是一个Block，Block可以存储在内存，当内存不够时可以存储到磁盘上。</p>
<p>1）输入：在Spark程序运行中，数据从外部数据空间（如分布式存储：textFile读取HDFS等，parallelize方法输入Scala集合或数据）输入Spark，数据进入Spark运行时数据空间，转化为Spark中的数据块，通过BlockManager进行管理。<br>2）运行：在Spark数据输入形成RDD后便可以通过变换算子，如fliter等，对数据进行操<br>作并将RDD转化为新的RDD，通过Action算子，触发Spark提交作业。如果数据需要复用，<br>可以通过Cache算子，将数据缓存到内存。<br>3）输出：程序运行结束数据会输出Spark运行时空间，存储到分布式存储中（如saveAsTextFile输出到HDFS），或Scala数据或集合中（collect输出到Scala集合，count返回Scala int型数据）。</p>
<p>大致可以分为三大类算子。<br>1）Value数据类型的Transformation算子，这种变换并不触发提交作业，针对处理的数<br>据项是Value型的数据。<br>2）Key-Value数据类型的Transfromation算子，这种变换并不触发提交作业，针对处理<br>的数据项是Key-Value型的数据对。<br>3）Action算子，这类算子会触发SparkContext提交Job作业。</p>
<p>spark执行机制总览</p>
<p>Spark应用提交后经历了一系列的转换，最后成为Task在每个节点上执行。Spark应用转<br>换（见图4-1）：RDD的Action算子触发Job的提交，提交到Spark中的Job生成RDD DAG，由<br>DAGScheduler转化为Stage DAG，每个Stage中产生相应的Task集合，TaskScheduler将任<br>务分发到Executor执行。每个任务对应相应的一个数据块，使用用户定义的函数处理数据<br>块。</p>
<p>Spark执行的底层实现原理，如图4-2所示。在Spark的底层实现中，通过RDD进行数据<br>的管理，RDD中有一组分布在不同节点的数据块，当Spark的应用在对这个RDD进行操作<br>时，调度器将包含操作的任务分发到指定的机器上执行，在计算节点通过多线程的方式执行任务。一个操作执行完毕，RDD便转换为另一个RDD，这样，用户的操作依次执行。Spark<br>为了系统的内存不至于快速用完，使用延迟执行的方式执行，即只有操作累计到Action（行动），算子才会触发整个操作序列的执行，中间结果不会单独再重新分配内存，而是在同一个数据块上进行流水线操作。</p>
<p>spark应用概念</p>
<p>Spark应用（Application）是用户提交的应用程序。执行模式有Local、Standalone、YARN、Mesos。根据Spark Application的Driver Program是否在集群中运行，Spark应用的运行方式又可以分为Cluster模式和Client模式。图4-3为Application包含的组件。<br>应用的基本组件如下。<br>·Application：用户自定义的Spark程序，用户提交后，Spark为App分配资源，将程序转换并执行。<br>·Driver Program：运行Application的main（）函数并创建SparkContext。<br>·RDD Graph：RDD是Spark的核心结构，可以通过一系列算子进行操作（主要有Transformation和Action操作）。当RDD遇到Action算子时，将之前的所有算子形成一个有向无环图（DAG），也就是图中的RDD Graph。再在Spark中转化为Job，提交到集群执行。一个App中可以包含多个Job。<br>·Job：一个RDD Graph触发的作业，往往由Spark Action算子触发，在SparkContext中通过runJob方法向Spark提交Job。<br>·Stage：每个Job会根据RDD的宽依赖关系被切分很多Stage，每个Stage中包含一组相同的Task，这一组Task也叫TaskSet。<br>·Task：一个分区对应一个Task，Task执行RDD中对应Stage中包含的算子。Task被封装好后放入Executor的线程池中执行。</p>
<p>应用提交方式</p>
<p>·Driver进程运行在客户端，对应用进行管理监控。<br>·主节点指定某个Worker节点启动Driver，负责整个应用的监控。<br>Driver进程是应用的主控进程，负责应用的解析、切分Stage并调度Task到Executor执<br>行，包含DAGScheduler等重要对象。</p>
<p>spark调度和任务分配</p>
<p>从Spark整体上看，调度可以分为4个级别，Application调度、Job调度、Stage的调度、Task的调度与分发。</p>
<p>spark的I/O机制：序列化、压缩、spark块管理</p>
<p>spark通信模块：RPC RMI JMS EJB WEB-SERVICE（通信框架AKKA）</p>
<p>容错机制 Lineage机制 + checkpoint</p>
<p>此外，如果某个errors分区丢失，则Spark只在相应的lines分区上执行filter操作来重建该errors分区。，RDD的Lineage记录的是粗颗粒度的特定数据Transformation操作（如filter、map、join等）行为。当这个RDD的部分分区数据丢失时，它可以通过Lineage获取足够的信息来重新运算和恢复丢失的数据分区。</p>
<p>检查点（本质是通过将RDD写入Disk做检查点）是为了通过lineage做容错的辅助，lineage过长会造成容错成本过高，这样就不如在中间阶段做检查点容错，如果之后有节点出现问题而丢失分区，从做检查点的RDD开始重做Lineage，就会减少开销。</p>
<p>Shuffle的本义是洗牌、混洗，即把一组有一定规则的数据打散重新组合转换成一组无规则随机数据分区。Spark中的Shuffle更像是洗牌的逆过程，把一组无规则的数据尽量转换成一组具有一定规则的数据，Spark中的Shuffle和MapReduce中的Shuffle思想相同，在实现<br>节和优化方式上不同</p>
<p>为什么Spark计算模型需要Shuffle过程？我们都知道，Spark计算模型是在分布式的环境下计算的，这就不可能在单进程空间中容纳所有的计算数据来进行计算，这样数据就按照Key进行分区，分配成一块一块的小分区，打散分布在集群的各个进程的内存空间中，并不是所有计算算子都满足于按照一种方式分区进行计算。例如，当需要对数据进行排序存储时，就有了重新按照一定的规则对数据重新分区的必要，Shuffle就是包裹在各种需要重分区的算子之下的一个对数据进行重新组合的过程。</p>
<p>主要介绍了Spark的执行机制和调度机制，包括调度与任务分配机制、I/O机制、通信机制、容错机制和Shuffle机制。Spark在执行过程中由Driver控制应用生命周期。调度中，Spark采用了经典的FIFO和FAIR等调度算法对内部的资源实现不同级别的调度。在Spark的I/O中，将数据抽象以块为单位进行管理，RDD中的一个分区就是需要处理的一个块。集群中的通信对于命令和状态的传递极为重要，Spark通过AKKA框架进行集群消息通信。Spark通过Lineage和Checkpoint机制进行容错性保证，Lineage进行重算操作，Checkpoint进行数据冗余备份。最后介绍了Spark中的Shuffle机制，Spark也借鉴了MapReduce模型，但是其Shuffle机制进行了创新与优化。</p>
<p>RDDs support two types of operations: transformations, which create a new dataset from an existing one, and actions, which return a value to the driver program after running a computation on the dataset. For example, map is a transformation that passes each dataset element through a function and returns a new RDD representing the results. On the other hand, reduce is an action that aggregates all the elements of the RDD using some function and returns the final result to the driver program (although there is also a parallel reduceByKey that returns a distributed dataset).</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[养眼就是养精神]]></title>
      <url>http://oneblog.top/2016/05/17/books/%E5%85%BB%E7%9C%BC%E5%B0%B1%E6%98%AF%E5%85%BB%E7%B2%BE%E7%A5%9E/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[必须的MathJax]]></title>
      <url>http://oneblog.top/2016/05/14/infotech/bigdata/MathJax/</url>
      <content type="html"><![CDATA[<p>MathJax是一个JavaScript引擎，用来显示网络上的数学公式。阅微堂上所有数学公式都用LaTex写出，通过MathJax来显示。</p>
<p>参考文档</p>
<p><a href="http://zhiqiang.org/blog/it/mathjax-make-mathematics-beautiful.html" target="_blank" rel="external">MathJax让你爱上数学公式</a><br><a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/" target="_blank" rel="external">Mathjax与LaTex公式简介</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spark应用程序开发]]></title>
      <url>http://oneblog.top/2016/05/13/infotech/bigdata/spark%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://blog.tomgou.xyz/shi-yong-intellij-ideapei-zhi-sparkying-yong-kai-fa-huan-jing-ji-yuan-ma-yue-du-huan-jing.html" target="_blank" rel="external">使用IntelliJ IDEA配置Spark应用开发环境及源码阅读环境</a></li>
<li><a href="https://www.jetbrains.com/help/idea/2016.1/creating-and-running-your-scala-application.html" target="_blank" rel="external">官网-Creating and Running Your Scala Application</a></li>
<li><a href="http://www.jetbrains.com/help/idea/2016.1/getting-started-with-sbt.html?origin=old_help" target="_blank" rel="external">官网-Getting Started with SBT</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-spark-practice1/" target="_blank" rel="external">使用 Scala 语言开发 Spark 应用程序</a></li>
<li><a href="https://taoistwar.gitbooks.io/spark-developer-guide/content/spark_brief/sparp_ecological_environment.html" target="_blank" rel="external">spark ecological environment</a></li>
<li><a href="http://blog.csdn.net/kinger0/article/details/46562473" target="_blank" rel="external">Spark-submit提交任务到集群</a></li>
</ul>
<h3 id="问题参考"><a href="#问题参考" class="headerlink" title="问题参考"></a>问题参考</h3><ul>
<li><a href="http://stackoverflow.com/questions/33222045/classnotfoundexception-anonfun-when-deploy-scala-code-to-spark" target="_blank" rel="external">ClassNotFoundException anonfun when deploy scala code to Spark</a></li>
<li><a href="http://blog.csdn.net/qq_22091165/article/details/40780331" target="_blank" rel="external">用IDEA开发spark应用，发生java.lang.ClassNotFoundException的解决</a></li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>开发环境可以搭建在Windows，也可以搭建在Ubuntu上，如果是在windows上搭建，到官网下载IDEA安装包直接安装即可使用；如果是在Ubuntu上，除了到官网下载指定平台的IDEA安装包外，还要注意Ubuntu（应该是所有Linux服务器）上，都需要JDK1.8的支持，即在PATH中需要加入类似<figure class="highlight plain"><figcaption><span>IDEA_JDK=/usr/local/jdk1.8.0_91```的语句。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在Ubuntu中部署IDEA，可以直接在IDEA中运行spark程序，但是经过尝试，目前发现spark定时程序的输出似乎不能在console中打印出来。</div><div class="line"></div><div class="line">在Windows中部署IDEA，暂时没有找到直接在IDEA中运行spark程序的办法，需要编译出jar包后，上传到部署spark的服务器，再使用submit方式运行spark程序。</div><div class="line"></div><div class="line">一般而言，在windows中安装IDEA使用性能比安装在虚拟机中Ubuntu的IDEA要高不少，除了不能直接在IDEA中运行spark程序外，还是建议在windows中使用IDEA。</div><div class="line"></div><div class="line">具体的spark程序开发详细说明，请参考文档，IDEA配置Spark应用开发环境及源码阅读环境](http://blog.tomgou.xyz/shi-yong-intellij-ideapei-zhi-sparkying-yong-kai-fa-huan-jing-ji-yuan-ma-yue-du-huan-jing.html)即可</div><div class="line"></div><div class="line">&gt; 注意在运行spark应用程序时，必须配置 VM options 为 -Dspark.master=local，否则会报错，报错内容起始部分见下文，可能是因为不指定成local，会造成spark访问不到HelloSpark文件的情况。</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>15/10/19 19:40:11 WARN TaskSetManager: Lost task 1.0 in stage 0.0 (TID 1, 127.0.0.1): java.lang.ClassNotFoundException: HelloSpark$$anonfun$1<br>```</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spark集群硬件配置要求]]></title>
      <url>http://oneblog.top/2016/05/13/infotech/bigdata/Spark%E9%9B%86%E7%BE%A4%E7%A1%AC%E4%BB%B6%E8%A6%81%E6%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://ifeve.com/spark-hardware-provisioning/" target="_blank" rel="external">spark官网推荐硬件配置</a></li>
<li><a href="http://www.itweet.cn/2016/01/26/Hadoop-Hardware-Planning/" target="_blank" rel="external">Hadoop平台架构–硬件篇</a></li>
<li><a href="http://www.infoq.com/cn/news/2014/08/spark-hardware-configure" target="_blank" rel="external">INFOQ-Spark的硬件配置</a></li>
<li><a href="http://ju.outofmemory.cn/entry/74070" target="_blank" rel="external">SPARK硬件配置</a></li>
</ul>
<p>对于Hbase这样的低延迟的系统，就不要部署在同样的机器上面，避免干扰</p>
<p>当Spark没办法把所有的内容放在内存中计算的时候，它会把部分内容存储到硬盘当中，如果该节点上也有HDFS目录，可以和HDFS共用同一个块磁盘</p>
<p>Spark最少在运行8GB以上的内存的机器上面</p>
<p>Spark是网络绑定型的系统，使用10GB以上的网络，会使程序运行得更快，可以通过http://<driver-node>:4040来查看Spark shuffles在网络当中传输的数据量</driver-node></p>
<p>Spark支持扩展数十个CPU核心一个机器，它实行的是线程之间最小共享。我们需要至少使用8-16个核心的机器</p>
<p>HBASE集群硬件要求<br>HDFS集群硬件要求</p>
<p>轻型处理配置（1U/machine）的：两个四核CPU，8GB内存，4个磁盘驱动器（1TB或2TB）。注意CPU密集型的工作，如自然语言处理涉及加载到RAM的大型模型在数据处理之前，应配置2GB内存每核心，而不是1GB内存每核心。<br>平衡计算配置（1U/machine）的两个四核CPU，16到24GB内存，4个磁盘驱动器直接连接使用的主板控制器（1TB或2TB）。这些往往是因为有两个主板和8个驱动器在一个单一的2U机柜的。<br>重配置存储（2U/machine）：两个四核CPU，16到24GB的内存，和12个磁盘驱动器（1TB或2TB）。这种类型的机器的功耗开始〜200W左右，处于闲置状态，可以去〜350W高活动时。<br>计算密集配置（2U/machine）：两个四核CPU，48-72GB的内存，8个磁盘驱动器（1TB或2TB）。这些都需要一个大的内存模型和沉重的参考数据缓存的组合时经常使用。</p>
<p>官网硬件配置要求</p>
<p>只要有可能，就尽量在HDFS相同的节点上部署Spark。最简单的方式就是，在HDFS相同的节点上独立部署Spark（standalone mode cluster），并配置好Spark和Hadoop的内存和CPU占用，以避免互相干扰（对Hadoop来说，相关的选项有 mapred.child.java.opts – 配置单个任务的内存，mapred.tasktracker.map.tasks.maximun和mapred.tasktracker.reduce.tasks.maximum – 配置任务个数）。当然，你也可以在一些通用的集群管理器上同时运行Hadoop和Spark，如：Mesos 或 Hadoop YARN。<br>如果不能将Spark和HDFS放在一起，那么至少要将它们部署到同一局域网的节点中。<br>对于像HBase这类低延迟数据存储来说，比起一味地避免存储系统的互相干扰，更需要关注的是将计算分布到不同节点上去。</p>
<p>Spark可以在8GB~几百GB内存的机器上运行得很好。不过，我们还是建议最多给Spark分配75%的内存，剩下的内存留给操作系统和系统缓存。</p>
<p>每次计算具体需要多少内存，取决于你的应用程序。如需评估你的应用程序在使用某个数据集时会占用多少内存，可以尝试先加载一部分数据集，然后在Spark的监控UI（http://<driver-node>:4040）上查看其占用内存大小。</driver-node></p>
<p>之所以大幅度聚焦内存和CPU的利用，其主要原因就在于：对比IO和网络通信，Spark在CPU和内存上遭遇的瓶颈日益增多；Tungsten项目将是Spark自诞生以来内核级别的最大改动，以大幅度提升Spark应用程序的内存和CPU利用率为目标，旨在最大程度上压榨新时代硬件性能。</p>
<p>为什么CPU会成为新的瓶颈？这里存在多个问题：首先，在硬件配置中，IO带宽提升的非常明显，比如10Gbps网络和SSD存储（或者做了条文化处理的HDD阵列）提供的高带宽；从软件的角度来看，通过Spark优化器基于业务对输入数据进行剪枝，当下许多类型的工作负载已经不会再需要使用大量的IO；在Spark Shuffle子系统中，对比底层硬件系统提供的原始吞吐量，序列化和哈希（CPU相关）成为主要瓶颈。从种种迹象来看，对比IO，Spark当下更受限于CPU效率和内存压力。</p>
<p>在JVM上的应用程序通常依赖JVM的垃圾回收机制来管理内存。毫无疑问，JVM绝对是一个伟大的工程，为不同工作负载提供了一个通用的运行环境。然而，随着Spark应用程序性能的不断提升，JVM对象和GC开销产生的影响将非常致命。</p>
]]></content>
      
        
        <tags>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HBASE基础]]></title>
      <url>http://oneblog.top/2016/05/13/infotech/bigdata/HBASE%E7%B2%BE%E8%A6%81/</url>
      <content type="html"><![CDATA[<h2 id="HBASE"><a href="#HBASE" class="headerlink" title="HBASE"></a>HBASE</h2><p>HBASE经常被称作无模式数据库。</p>
<p>HBASE是BigTable基于Hadoop的实现，目前HBASE主要应用在三种场景：</p>
<ul>
<li>增量数据</li>
<li>内容服务（短链接、用户生产内容）</li>
<li>信息交换（信息交换历史记录）</li>
</ul>
<p>其实后两者本质上也是“增量数据”</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>用于测试建议使用单机部署，伪分布式部署可能会因为zookeeper不存在而报错。</p>
<h2 id="HBASE和Cassandra区别"><a href="#HBASE和Cassandra区别" class="headerlink" title="HBASE和Cassandra区别"></a>HBASE和Cassandra区别</h2><p>Hbase更加适合于数据仓库、大型数据的处理和分析（如进行Web页面的索引等），而Cassandra则更适合于实时事务处理和提供交互型数据</p>
<p>Cassandra做的还不够好的一件事情就是MapReduce！对于不精通此项技术同学简单的解释一句，这是一个用于并行处理大量数据的系统，比如从上百万从网络上抓取的页面提取统计信息。MapReduce和相关系统，比如Pig和Hive可以和HBase一起良好协作，因为它使用HDFS来存储数据，这些系统也是设计用来使用HDFS的。如果你需要进行这样的数据处理和分析的话，HBase可能是你目前的最佳选择。</p>
<h2 id="HBASE查询模式"><a href="#HBASE查询模式" class="headerlink" title="HBASE查询模式"></a>HBASE查询模式</h2><p>HBase的查询实现只提供两种方式：</p>
<ul>
<li>按指定RowKey获取唯一一条记录，get方法（org.apache.hadoop.hbase.client.Get）</li>
<li>按指定的条件获取一批记录，scan方法（org.apache.hadoop.hbase.client.Scan）</li>
</ul>
<p>实现条件查询功能使用的就是scan方式，scan在使用时有以下几点值得注意：</p>
<ul>
<li>scan可以通过setCaching与setBatch方法提高速度（以空间换时间）；</li>
<li>scan可以通过setStartRow与setEndRow来限定范围。范围越小，性能越高。<br>通过巧妙的RowKey设计使我们批量获取记录集合中的元素挨在一起（应该在同一个Region下），可以在遍历结果时获得很好的性能。</li>
<li>scan可以通过setFilter方法添加过滤器，这也是分页、多条件查询的基础。</li>
</ul>
<p>HBase没有Query命令，查找某个特定值的记录的唯一办法，是使用扫描Scan命令读出表的某些部分，然后再使用过滤器Filter来得到有关记录。</p>
<h3 id="HBase基本命令"><a href="#HBase基本命令" class="headerlink" title="HBase基本命令"></a>HBase基本命令</h3><p>HBase提供了5个基本命令，Get、Put、Delete、Scan、Increment。基于非行键值查询HBase的唯一方式是带过滤器的扫描。</p>
<blockquote>
<p>HBase中所有数据都是作为原始数据（raw data）使用字节数组的形式存储的。</p>
</blockquote>
<p>HBase增加了随机存取层，是HDFS缺失的部分，是对Hadoop的理想补充。</p>
<p>HBase用于开发的安装建议使用单机部署，如果使用伪分布式部署，每次启动或运行shell时会报出zookeeper相关的错误</p>
<p>HBase使用表作为顶级结构来存储数据，写数据到HBase，就是写数据到表。</p>
<p>HBase使用put存储数据，使用get、scan读取数据。</p>
<p>HBase可以存储每个数据单元的多个时间版本，默认版本数3个。</p>
<h3 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h3><ul>
<li>表（table）<br>HBase用表来组织数据，表名是字符串。</li>
<li>行（row）<br>在表里，数据按照行存储。行由行键唯一标识，行键没有数据类型。</li>
<li>列族（column family）<br>行里的数据按照列族分组。影响到HBase的物理存放，必须在事前定义，并且不轻易修改。表中每行拥有相同的列族，行不必在每个列族里存放数据，列族的名称也是字符串。</li>
<li>列限定符（column qualifier）<br>列族里的数据通过列限定符或列来定位。列限定符不必事先定义，列限定符不必在不同行之间保持一致，列限定符没有数据类型，用字符串表示。</li>
<li>单元（cell）<br>行键、列族和列限定符一起确定一个单元，单元里存储的值成为单元值，没有数据类型。</li>
<li>时间版本（version）<br>单元值有时间版本，用时间戳标识。</li>
</ul>
<blockquote>
<p>HBase = 无模式数据库，半结构化数据库<br>HBase不能实施关系约束，不支持多行事务</p>
</blockquote>
<p>过滤器可以应用到行键、列限定符和单元值（不包括列族），可以组合使用多个过滤器，过滤器允许对数据分页进行处理，限制扫描器返回的行数等等。</p>
<p>列值递增（原子操作）？<br>单行操作是原子性的，给定行的多个写操作，总是以每个写操作为整体彼此独立的。<br>行间操作不是原子性的。</p>
<p>HBase是一种专门为半结构化数据和水平可扩展性设计的数据库，是无模式数据库，也是无类型数据库，把所有数据不加解释地按照字节数组（Byte[]）存储。有5个基本命令用来访问HBase中的数据，即Get、Put、Delete、Scan和Increment。基于非行键值查询HBase的唯一办法是通过带过滤器的扫描。</p>
<h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><h4 id="HBase写路径"><a href="#HBase写路径" class="headerlink" title="HBase写路径"></a>HBase写路径</h4><p>HBase执行写入时会写到两个地方：预写式日志（write-ahead log ~ WAL）和MemStore。</p>
<p>MemStore是内存里的写入缓存区，HBase数据在永久写入硬盘之前在此累积，当其填满后，会写入硬盘生成一个HFile。HFile对应于列族，一个列族可以有多个HFile，但一个HFile不能存储多个列族的数据。</p>
<p>HBase服务器宕机时，没有从MemStore写入HFile的数据，将可以通过回放WAL来恢复，该过程无需手工执行。</p>
<h4 id="HBase读路径"><a href="#HBase读路径" class="headerlink" title="HBase读路径"></a>HBase读路径</h4><p>HBase读动作必须重新衔接持久化到硬盘上HFile和内存MemStore中的数据。HBase在读操作上使用了LRU缓存技术，也被叫做BlockCache，和MemStore在一个JVM堆里。BlockCache设计用来保存从HFile里读入内存的频繁访问的数据，每个列族都有自己的BlockCache。</p>
<p>HFile的物理存放是一个Block的序列+这些Block的索引，Block是建立索引的最小数据单位，也是从硬盘读取的最小数据单位。</p>
<p>从HBase中读取一行，首先会检查MemStore等待修改的队列，然后检查BlockCache看包含该行的Block是否最近被访问过，最后访问硬盘上对于的HFile。由于一个HFile只能存放一个列族的数据，因此为了获取一个完整行的数据，HBase可能需要读取多个HFile。</p>
<h4 id="HBase删除"><a href="#HBase删除" class="headerlink" title="HBase删除"></a>HBase删除</h4><p>删除动作和写入动作相同，但是不会立即删除，只是做上标记，HBase后台会在合适的时候对HFile进行合并，此时才会真正删除。</p>
<h4 id="HBase数据坐标"><a href="#HBase数据坐标" class="headerlink" title="HBase数据坐标"></a>HBase数据坐标</h4><p>HBase使用行键、列族、列限定符和时间版本定位一个单元，读取数据时，可以输入[行键]、[行键+列族]、[行键+列族+列限定符]、[行键+列族+列限定符+时间版本]，将分别获取指定范围的数据。单元坐标的维度越少，对应值的集合范围越广。</p>
<h3 id="行键设计"><a href="#行键设计" class="headerlink" title="行键设计"></a>行键设计</h3><p>预期的数据访问模式对HBase的模式设计有很大的影响。在理想情况下，HBase中的表根据预期的模式来组织。行键是HBase中唯一的全局索引坐标，因此查询经常通过行键扫描实现。复合行键是支持这种扫描的常见做法。行键值经常希望是均衡分布的，通常采用MD5或SHA1等散列算法来实现。</p>
<h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>行键设计：md5(用户名)+时间戳</p>
<p>优点：行键的第一部分使用md5(用户名)的形式，使得用户数据以自然行的顺序有效地生成数据捅（bucket），即来自同一用户的数据以连续行的形式存储在一起。</p>
]]></content>
      
        
        <tags>
            
            <tag> hbase </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSH端口代理]]></title>
      <url>http://oneblog.top/2016/05/13/infotech/linux/ssh%E7%AB%AF%E5%8F%A3%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>早知道SSH功能强大，但始终都没有深入的使用，今天终于基于XSHELL使用了SSH的端口代理转发功能，果然很好很强大。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><ul>
<li>远程服务器A在默认22端口上提供SSH服务</li>
<li>远程服务器A同时在localhost:8080提供WEB服务</li>
<li>本地PC可以直接连接到远程服务器A</li>
<li>本地PC需要使用浏览器访问远程服务器A上的localhost:8080的WEB服务</li>
</ul>
<h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><ul>
<li>远程服务器A在默认22端口上提供SSH服务</li>
<li>远程服务器A同时在localhost:8080提供WEB服务</li>
<li>本地PC需要通过某种特殊方式连接到远程服务器A</li>
<li>本地PC需要使用浏览器访问远程服务器A上的localhost:8080的WEB服务</li>
</ul>
<blockquote>
<p>其实这两种场景比较类似，实际上SSH端口转发都是为了解决通过SSH连接来访问服务器上其它服务的问题。</p>
</blockquote>
<h2 id="使用XSHELL进行SSH端口代理"><a href="#使用XSHELL进行SSH端口代理" class="headerlink" title="使用XSHELL进行SSH端口代理"></a>使用XSHELL进行SSH端口代理</h2><h3 id="XSHELL先建立到远程服务器的连接"><a href="#XSHELL先建立到远程服务器的连接" class="headerlink" title="XSHELL先建立到远程服务器的连接"></a>XSHELL先建立到远程服务器的连接</h3><h3 id="菜单“查看”-gt-“隧道窗格”"><a href="#菜单“查看”-gt-“隧道窗格”" class="headerlink" title="菜单“查看”-&gt;“隧道窗格”"></a>菜单“查看”-&gt;“隧道窗格”</h3><h3 id="在下方“隧道窗格”中配置“转移规则”"><a href="#在下方“隧道窗格”中配置“转移规则”" class="headerlink" title="在下方“隧道窗格”中配置“转移规则”"></a>在下方“隧道窗格”中配置“转移规则”</h3><p>在“转移规则”空白处右键点击，选择添加，在新增转移规则窗口中，主要有“类型（方向）”“源主机”“侦听端口”“目标主机”“目标端口”五个内容框要填写，一般我们只要填写“侦听端口”和“目标端口”即可。</p>
<p>这个填写的意思是，通过当前的SSH隧道，就可以直接在源主机（即本地PC）的侦听端口访问到目标主机的目标端口。对于场景一和场景二，侦听端口和目标端口可以都填写成8080，其它按照默认即可。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://jingyan.baidu.com/album/09ea3ededbb6b6c0aede39d2.html" target="_blank" rel="external">通过ssh开启代理使用xshell进行端口转发</a></p>
]]></content>
      
        
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SPARK测试环境安装部署]]></title>
      <url>http://oneblog.top/2016/05/13/infotech/bigdata/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/SPARK%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://www.w2bc.com/article/46602" target="_blank" rel="external">spark运行环境安装</a></li>
</ul>
<h2 id="JDK和SCALA环境部署"><a href="#JDK和SCALA环境部署" class="headerlink" title="JDK和SCALA环境部署"></a>JDK和SCALA环境部署</h2><p>官网下载jdk（jdk-7u79-linux-x64.tar.gz）和scala（scala-2.10.6.tgz）后，解压移动到/usr/local目录下，在.bashrc末尾添加以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_79</div><div class="line"><span class="comment"># IDEA_JDK是给IDEA使用的，只有设置了这个，IDEA采用使用专门的JDK环境</span></div><div class="line"><span class="built_in">export</span> IDEA_JDK=/usr/<span class="built_in">local</span>/jdk1.8.0_91</div><div class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/dt.jar:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</div><div class="line"><span class="built_in">export</span> SCALA_HOME=/usr/<span class="built_in">local</span>/scala-2.10.6</div><div class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop-2.7.2</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;SCALA_HOME&#125;</span>/bin:<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意scala版本必须是2.10.X，因为spark-1.6.1是如此要求的。</p>
</blockquote>
<h2 id="spark部署（单机）"><a href="#spark部署（单机）" class="headerlink" title="spark部署（单机）"></a>spark部署（单机）</h2><h3 id="官网下载TAR包"><a href="#官网下载TAR包" class="headerlink" title="官网下载TAR包"></a>官网下载TAR包</h3><p>下载spark-1.6.1-bin-hadoop2.6.tgz，解压移动到/opt目录</p>
<h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3><p>./conf/spark-env.sh</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#JDK安装路径</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_79</div><div class="line"><span class="comment">#SCALA安装路径</span></div><div class="line"><span class="built_in">export</span> SCALA_HOME=/usr/<span class="built_in">local</span>/scala-2.10.6</div><div class="line"><span class="comment">#主节点的IP地址</span></div><div class="line"><span class="built_in">export</span> SPARK_MASTER_IP=192.168.79.133</div><div class="line"><span class="comment">#分配的内存大小</span></div><div class="line"><span class="comment"># export SPARK_WORKER_MEMORY=200m</span></div><div class="line"><span class="comment">#指定hadoop的配置文件目录</span></div><div class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop-2.7.2</div><div class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/opt/hadoop-2.7.2/etc/hadoop</div><div class="line"><span class="comment">#指定worker工作时分配cpu数量</span></div><div class="line"><span class="comment"># export SPARK_WORKER_CORES=1</span></div><div class="line"><span class="comment">#指定spark实例，一般1个足以</span></div><div class="line"><span class="comment"># export SPARK_WORKER_INSTANCES=1</span></div><div class="line"><span class="comment">#jvm操作，在spark1.0之后增加了spark-defaults.conf默认配置文件，该配置参数在默认配置在该文件中</span></div><div class="line"><span class="comment"># export SPARK_JAVA_OPTS</span></div></pre></td></tr></table></figure>
<h3 id="启动master和worker"><a href="#启动master和worker" class="headerlink" title="启动master和worker"></a>启动master和worker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./sbin/start-master.sh</div><div class="line"><span class="comment"># WEB访问http://192.168.79.133:8080/，可以看到SPARK URL: spark://192.168.79.133:7077</span></div><div class="line">./sbin/start-slave.sh spark://192.168.79.133:7077</div></pre></td></tr></table></figure>
<blockquote>
<p>启动slave时，需要加上master的URL</p>
</blockquote>
<h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">one@ubuntu:/opt/spark-1.6.1-bin-hadoop2.6$ jps</div><div class="line">48196 Jps</div><div class="line">47211 SecondaryNameNode</div><div class="line">46997 DataNode</div><div class="line">48015 Master    <span class="comment"># spark master</span></div><div class="line">48136 Worker    <span class="comment"># spark slave</span></div><div class="line">46873 NameNode</div></pre></td></tr></table></figure>
<blockquote>
<p>NameNode\SecondaryNameNode\DataNode是Hadoop相关进程<br>Master\Worker是spark相关进程</p>
</blockquote>
<h4 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 准备测试用的文本文件</span></div><div class="line">hdfs dfs -mkdir /user/spark</div><div class="line">hdfs dfs -put README.md /user/spark</div><div class="line"><span class="comment"># 开始测试</span></div><div class="line">./bin/spark-shell spark://192.168.79.133:7077</div><div class="line">val textFile = sc.textFile(<span class="string">"hdfs://localhost:9000/user/spark/README.md"</span>)</div><div class="line">textFile.count()</div></pre></td></tr></table></figure>
<h4 id="WEB访问"><a href="#WEB访问" class="headerlink" title="WEB访问"></a>WEB访问</h4><p>访问<a href="http://localhost:8080/查看spark的master和slave运行情况。" target="_blank" rel="external">http://localhost:8080/查看spark的master和slave运行情况。</a></p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HADOOP测试环境安装部署]]></title>
      <url>http://oneblog.top/2016/05/13/infotech/bigdata/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/HADOOP%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://www.powerxing.com/install-hadoop/" target="_blank" rel="external">Hadoop安装教程-单机和伪分布式部署</a></li>
</ul>
<h2 id="JDK和SCALA环境部署"><a href="#JDK和SCALA环境部署" class="headerlink" title="JDK和SCALA环境部署"></a>JDK和SCALA环境部署</h2><blockquote>
<p>注意：以下操作均使用root用户</p>
</blockquote>
<p>下载jdk（jdk-7u79-linux-x64.tar.gz）和scala（scala-2.10.6.tgz）后，将两者解压移动到/usr/local目录下，在~/.bashrc末尾添加以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_79</div><div class="line"><span class="comment"># IDEA_JDK这个变量是给IDEA使用的，只有设置了这个，IDEA才能正常运行</span></div><div class="line"><span class="comment"># IDEA2016版本需要使用JDK1.8（UBUNTU 1404）</span></div><div class="line"><span class="built_in">export</span> IDEA_JDK=/usr/<span class="built_in">local</span>/jdk1.8.0_91</div><div class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/dt.jar:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</div><div class="line"><span class="built_in">export</span> SCALA_HOME=/usr/<span class="built_in">local</span>/scala-2.10.6</div><div class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop-2.7.2</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;SCALA_HOME&#125;</span>/bin:<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意scala版本必须是2.10.X（spark-1.6.1依赖）</p>
</blockquote>
<h2 id="HADOOP安装部署（伪分布式）"><a href="#HADOOP安装部署（伪分布式）" class="headerlink" title="HADOOP安装部署（伪分布式）"></a>HADOOP安装部署（伪分布式）</h2><h3 id="SSH无密码登录配置"><a href="#SSH无密码登录配置" class="headerlink" title="SSH无密码登录配置"></a>SSH无密码登录配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.ssh/                     <span class="comment"># 若没有该目录，请先执行一次ssh localhost</span></div><div class="line">ssh-keygen -t rsa              <span class="comment"># 会有提示，都按回车就可以</span></div><div class="line">cat ./id_rsa.pub &gt;&gt; ./authorized_keys  <span class="comment"># 加入授权</span></div></pre></td></tr></table></figure>
<h3 id="下载hadoop"><a href="#下载hadoop" class="headerlink" title="下载hadoop"></a>下载hadoop</h3><p>官网下载hadoop-2.7.2.tar.gz，解压后移动到/opt</p>
<h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><p>单机模式无需安装，可以直接运行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir input</div><div class="line">cp ./etc/hadoop/*.xml input</div><div class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar grep ./input ./output <span class="string">'dfs[a-z.]+'</span></div><div class="line"><span class="comment"># 正常执行完成后，查看output文件夹验证处理结果</span></div></pre></td></tr></table></figure>
<h3 id="伪分布式部署"><a href="#伪分布式部署" class="headerlink" title="伪分布式部署"></a>伪分布式部署</h3><blockquote>
<p>先删除之前用到的input和output文件夹（保持工作环境整洁）</p>
</blockquote>
<h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><p>配置三个文件core-site.xml、hdfs-site.xml、hadoop-env.sh，它们都位于./etc/hadoop目录下，配置内容如下：</p>
<h5 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 特别注意，这个地方必须修改，否则运行会报错找不到JAVA_HOME</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_79</div></pre></td></tr></table></figure>
<h4 id="namenode格式化"><a href="#namenode格式化" class="headerlink" title="namenode格式化"></a>namenode格式化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/hdfs namenode -format</div></pre></td></tr></table></figure>
<p>结果输出倒数几行中，有以下内容的表示成功格式化。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Storage</span> directory /<span class="meta">opt</span>/hadoop/tmp/dfs/name has <span class="keyword">been </span>successfully formatted</div></pre></td></tr></table></figure>
<h4 id="启动namenode和datanode守护进程"><a href="#启动namenode和datanode守护进程" class="headerlink" title="启动namenode和datanode守护进程"></a>启动namenode和datanode守护进程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">one@ubuntu:/opt/hadoop-2.7.2$ ./sbin/<span class="keyword">start</span>-dfs.sh</div><div class="line"><span class="keyword">Starting</span> namenodes <span class="keyword">on</span> [localhost]</div><div class="line">localhost: <span class="keyword">starting</span> namenode, <span class="keyword">logging</span> <span class="keyword">to</span> /opt/hadoop<span class="number">-2.7</span><span class="number">.2</span>/<span class="keyword">logs</span>/hadoop-one-namenode-ubuntu.out</div><div class="line">localhost: <span class="keyword">starting</span> datanode, <span class="keyword">logging</span> <span class="keyword">to</span> /opt/hadoop<span class="number">-2.7</span><span class="number">.2</span>/<span class="keyword">logs</span>/hadoop-one-datanode-ubuntu.out</div><div class="line"><span class="keyword">Starting</span> secondary namenodes [<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]</div><div class="line">The authenticity <span class="keyword">of</span> host <span class="string">'0.0.0.0 (0.0.0.0)'</span> can<span class="string">'t be established.</span></div><div class="line">ECDSA key fingerprint is a1:a3:46:41:ab:db:f5:ca:04:df:54:84:99:ba:59:2c.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">0.0.0.0: Warning: Permanently added '<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">' (ECDSA) to the list of known hosts.</span></div><div class="line">0.0.0.0: starting secondarynamenode, logging to /opt/hadoop-2.7.2/logs/hadoop-one-secondarynamenode-ubuntu.out</div></pre></td></tr></table></figure>
<h4 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h4><p>jps查看进程</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/opt/hadoop-</span><span class="number">2.7</span>.<span class="number">2</span><span class="comment"># jps</span></div><div class="line"><span class="number">2823</span> DataNode</div><div class="line"><span class="number">3167</span> Jps</div><div class="line"><span class="number">3021</span> SecondaryNameNode</div><div class="line"><span class="number">2691</span> NameNode</div></pre></td></tr></table></figure>
<p>运行examples</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</div><div class="line">./bin/hdfs dfs -mkdir /user/hadoop/input</div><div class="line">./bin/hdfs dfs -put ./etc/hadoop/*.xml /user/hadoop/input</div><div class="line">./bin/hdfs dfs -ls /user/hadoop/input</div><div class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar grep input output <span class="string">'dfs[a-z.]+'</span></div></pre></td></tr></table></figure>
<h4 id="WEB访问测试"><a href="#WEB访问测试" class="headerlink" title="WEB访问测试"></a>WEB访问测试</h4><p>访问<a href="http://localhost:50070/查看运行情况。" target="_blank" rel="external">http://localhost:50070/查看运行情况。</a></p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hdfs </tag>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[crontab中脚本的编写和加载方式]]></title>
      <url>http://oneblog.top/2016/05/13/infotech/linux/crontab%E4%B8%AD%E8%84%9A%E6%9C%AC%E7%9A%84%E7%BC%96%E5%86%99%E5%92%8C%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>由于crontab中的任务默认都是在nologin状态下运行，导致很多在login状态下可以执行的命令（脚本）无法在crontab中执行，这种情况下，目前整理了三种处理方式，见下文。</p>
<h3 id="直接在脚本中设置环境变量"><a href="#直接在脚本中设置环境变量" class="headerlink" title="直接在脚本中设置环境变量"></a>直接在脚本中设置环境变量</h3><p>在脚本的编写中，直接加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>SHELL=/bin/bash<br>NVM_PATH=/home/one/.nvm/versions/node/v4.4.0/lib/node<br>NVM_DIR=/home/one/.nvm<br>PATH=/home/one/.nvm/versions/node/v4.4.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games<br>NVM_BIN=/home/one/.nvm/versions/node/v4.4.0/bin</p>
<h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>hexo generate<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 执行脚本前先运行.bashrc文件</div><div class="line"></div><div class="line">执行脚本前先运行.bashrc文件加载环境变量</div></pre></td></tr></table></figure></p>
<ul>
<li><ul>
<li><ul>
<li><ul>
<li><ul>
<li>/bin/bash “source ~/.bashrc; /opt/hexo/auto_deploy.sh &gt;&gt; /opt/hexo/deploy.log 2&gt;&amp;1”<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 如果采用这种方式，一定要注意，一般<span class="selector-class">.bashrc</span>中都对<span class="selector-tag">nologin</span>用户做了屏蔽，即<span class="selector-tag">nologin</span>用户是无法执行<span class="selector-class">.bashrc</span>的，如果确实需要，必须修改<span class="selector-class">.bashrc</span>头部代码。以下这段代码是<span class="selector-tag">unbuntu14</span><span class="selector-class">.04</span>下的<span class="selector-class">.bashrc</span>头部代码</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="If-not-running-interactively-don’t-do-anything"><a href="#If-not-running-interactively-don’t-do-anything" class="headerlink" title="If not running interactively, don’t do anything"></a>If not running interactively, don’t do anything</h1><p>case $- in<br>    <em>i</em>) ;;<br>      *) return;;<br>esac<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">所以，这么麻烦的话，一般不建议采用这种方式。</div><div class="line"></div><div class="line">### 指定脚本采用login方式执行</div><div class="line"></div><div class="line">在crontab中直接指定脚本采用login方式执行，代码如下，关键在其中的```-lc</div></pre></td></tr></table></figure></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * <span class="regexp">/bin/bash</span> -lc <span class="string">'/opt/hexo/auto_deploy.sh'</span> <span class="meta">&gt;&gt; </span>/opt/hexo/deploy.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> crontab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby和gem环境安装部署]]></title>
      <url>http://oneblog.top/2016/05/10/infotech/ruby/ruby%E5%92%8Cgem%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="ruby环境安装"><a href="#ruby环境安装" class="headerlink" title="ruby环境安装"></a>ruby环境安装</h2><p>选择下载ruby-2.0.0-xxx.tar.gz下载、编译和安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 网络搜索文章推荐安装到 /usr/local</span></div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span> --enable-shared --enable-pthread --disable-install-doc --with-opt-dir=/usr/<span class="built_in">local</span>/lib</div><div class="line"><span class="comment"># 个人推荐安装到 /usr/local/ruby 目录下</span></div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/ruby --enable-shared --enable-pthread --disable-install-doc</div></pre></td></tr></table></figure>
<p>安装完成后，将ruby可执行文件路径加入到PATH中</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># .bashrc 或 .bash_profile 中</span></div><div class="line">export PATH=<span class="regexp">/usr/</span>local<span class="regexp">/ruby/</span>bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<h3 id="gem环境配置"><a href="#gem环境配置" class="headerlink" title="gem环境配置"></a>gem环境配置</h3><p>gem作为包管理器，如果使用默认的源（<a href="https://rubygems.org/）,可能速度很慢，所以一般考虑替换成" target="_blank" rel="external">https://rubygems.org/）,可能速度很慢，所以一般考虑替换成</a> <a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a> 或 <a href="https://gems.ruby-china.org/" target="_blank" rel="external">https://gems.ruby-china.org/</a></p>
<p>在使用以下命令添加新源时：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org/</div></pre></td></tr></table></figure>
<p>可能会报错：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error </span>fetching https://gems.ruby-china.org/:</div><div class="line">        SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://gems.ruby-china.org/specs.4.8.gz)</div></pre></td></tr></table></figure>
<p>此时，可用通过下载SSL证书，并在环境变量中新增变量的方式来解决：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载证书</span></div><div class="line">wget http:<span class="regexp">//</span>curl.haxx.se<span class="regexp">/ca/</span>cacert.pem</div><div class="line"><span class="comment"># export环境变量（可以加到.bashrc或.bash_profile文件末尾）</span></div><div class="line">export SSL_CERT_FILE=<span class="regexp">/path/</span>cacert.pem</div></pre></td></tr></table></figure>
<p>再次执行<code>gem sources --add https://gems.ruby-china.org/</code>即可正常执行。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/ruby-china/rubygems-mirror/wiki" target="_blank" rel="external">关于 Windows 下证书无法验证问题</a></p>
<h2 id="rubygems镜像"><a href="#rubygems镜像" class="headerlink" title="rubygems镜像"></a>rubygems镜像</h2><ul>
<li><a href="https://rubygems.org/" target="_blank" rel="external">https://rubygems.org/</a></li>
<li><a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a></li>
<li><a href="http://gems.ruby-china.org/" target="_blank" rel="external">http://gems.ruby-china.org/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> gem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令[撤销恢复]]]></title>
      <url>http://oneblog.top/2016/05/09/infotech/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%5B%E6%92%A4%E9%94%80%E6%81%A2%E5%A4%8D%5D/</url>
      <content type="html"><![CDATA[<h2 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h2><p>获取指定tag的代码，如果要仅仅获取代码而没有.git，有第三方git-export命令可以使用，不过使用先git clone再删除.git文件夹的方式更为简单直接。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">--branch</span> <span class="tag">&lt;tag_name&gt;</span> <span class="tag">&lt;repo_url&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 只能恢复对文件的修改，不能删除新增的文件夹和文件</span></div><div class="line">git checkout . <span class="comment"># 取消修改所有文件</span></div><div class="line">git checkout -- &lt;file&gt; <span class="comment"># 取消修改单个文件</span></div></pre></td></tr></table></figure>
<h3 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># git clean 可以完全取消修改和删除新增的文件夹和文件</span></div><div class="line"><span class="meta"># -n 列出待删除的文件（不会列出文件夹）</span></div><div class="line">git clean -n</div><div class="line"><span class="meta"># -dn 列出待删除的文件夹和文件</span></div><div class="line">git clean -dn</div><div class="line"><span class="meta"># -f 强制删除文件（不会删除文件夹）</span></div><div class="line">git clean -f</div><div class="line"><span class="meta"># -df 强制删除文件夹和文件</span></div><div class="line">git clean -df</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 -f 配置，依赖于 ~/.gitconfig 中 clean.requireForce 参数的配置是 true 还是 false</p>
</blockquote>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改最后一次提交</span></div><div class="line">git commit <span class="comment">--amend</span></div></pre></td></tr></table></figure>
<p>参考 <a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C" target="_blank" rel="external">Git-基础-撤销操作</a></p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.gitignore配置说明]]></title>
      <url>http://oneblog.top/2016/05/09/infotech/git/gitignore%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>.gitignore 中，单独使用node_modules就可以忽略所有目录和子目录下的node_modules</p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础健身计划]]></title>
      <url>http://oneblog.top/2016/05/07/life/%E8%BF%90%E5%8A%A8%E5%81%A5%E8%BA%AB/%E5%9F%BA%E7%A1%80%E5%81%A5%E8%BA%AB%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>今天查阅了知乎上健身的相关知识，总结下健身的基本原则，如下：</p>
<ul>
<li>健身训练的流程：1、准备活动（基础健身中简单活动下即可），2、训练，3、放松（很重要）</li>
<li>健身，需要兼顾全身，而不是只练胸大肌</li>
<li>一般而言，每次锻炼的肌肉恢复需要48小时，所以肌肉训练需要隔天</li>
<li>建议下午下班后先健身，健身之后吃饭</li>
<li>过度的有氧运动会消耗肌肉，所以一般而言，有氧运动的时间应该控制在1小时以内，以45分钟为宜</li>
<li>有氧运动的强度，应以</li>
</ul>
<p>对于目前的我，得出的基础健身方案，如下：</p>
<h3 id="健身时间安排"><a href="#健身时间安排" class="headerlink" title="健身时间安排"></a>健身时间安排</h3><p>基本的考虑是两天一个小周期，这个小周期里，一天做肌肉锻炼，一天跑步。如果隔天肌肉还是非常酸痛，就继续休息，特别是刚开始肌肉力量练习的时候。</p>
<h3 id="肌肉锻炼"><a href="#肌肉锻炼" class="headerlink" title="肌肉锻炼"></a>肌肉锻炼</h3><h4 id="核心动作"><a href="#核心动作" class="headerlink" title="核心动作"></a>核心动作</h4><ul>
<li>深蹲（注意腰背挺直）徒手~抱哑铃~增重</li>
<li>俯卧挺身（十字挺身~下背部核心肌群）</li>
<li>俯卧撑（下降吸气+撑起呼气，缓慢的做有利于增肌，3~4组12~15次，负重~用背包，宽距|窄距|脚部垫高）</li>
<li>仰卧卷腹+仰卧等车</li>
<li>哑铃训练<ul>
<li><a href="http://jingyan.baidu.com/article/e4511cf30bdb8a2b845eafc9.html" target="_blank" rel="external">训练方法参考一</a></li>
<li><a href="http://www.jirou.com/qicai/yaling/2010/0727/2359.html" target="_blank" rel="external">训练方法参考二</a></li>
<li><a href="http://jingyan.baidu.com/article/a681b0ded7da573b19434668.html" target="_blank" rel="external">训练方法参考三</a></li>
</ul>
</li>
</ul>
<h4 id="选择动作"><a href="#选择动作" class="headerlink" title="选择动作"></a>选择动作</h4><ul>
<li>剪蹲</li>
<li>仰卧划船+引体向上</li>
</ul>
<h3 id="放松运动"><a href="#放松运动" class="headerlink" title="放松运动"></a>放松运动</h3><ul>
<li>各种拉筋</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 健身 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据知识学习进阶的思考]]></title>
      <url>http://oneblog.top/2016/05/03/infotech/bigdata/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>目前手头的学习材料有以下几个：</p>
<ul>
<li>视频教程（王家林）<ul>
<li>第一阶段 scala相关教程（20小时）</li>
<li>第二阶段 spark基础+简单实践（7小时）</li>
<li>第三阶段 spark核心架构分析（12小时）</li>
<li>第四阶段 spark核心框架系列~流计算+图计算+sparkSQL+机器学习+YARN（8小时）</li>
<li>第五阶段 spark商业案例（3小时）</li>
<li>第六阶段 spark源码解析（5小时）</li>
</ul>
</li>
<li><a href="http://book.51cto.com/art/201408/448416.htm" target="_blank" rel="external">51CTO教程（王家林）</a><br>  这份教程，感觉两点比较突出，第一，实践步骤详细；第二，概念方面的描述上，看到的RDD等的描述，都相当的含糊，没有详细的描述，不值得看，仅仅针对“为什么spark会替代hadoop”做出了详细的描述。</li>
<li>《Spark大数据处理：技术、应用与性能优化》、《Spark大数据分析实战》<br>  这两本书可以认为是姐妹篇，第一本书主要讲解了spark的具体的技术细节，而第二本书主要以实例的方式说明了spark在大数据分析上的处理流程。</li>
<li>《机器学习实战》《机器学习（周志华）》<br>  这两本书可以作为机器学习的理论学习</li>
<li>《写给程序员的数据挖掘实践指南》<br>  这本书可以作为各种数学算法的入门指导书</li>
</ul>
<p>我认为主要有两个学习思路，一是从上向下，而是从下向上。</p>
<p>从上向下，就是先学习大数据的应用场景和趋势，坚定自己学习大数据的选择；接着，学习大数据涉及的主要理论知识，暂且认为主要是机器学习的理论，同时学习理解其中涉及的各种数学算法知识，了解各类算法的优劣；第三步，才是学习spark部署和基本应用程序编写，学习spark mllib的使用方法；到了这个时候，才有必要去深入了解spark的各种运行机制+集群管理等知识，来保障自己编写的应用程序可以正常运行。</p>
<p>从下向上，那么就是反过来。为什么有两个方向，主要是从不同的工作职责来考虑，如果是面向客户的解决方案专家，那么就该从上向下的学习，因为客户不会关心spark具体是如何实现算法的，他们只会关心具体的业务实现，关心哪种算法更适合他们，如何评估效果等具体的业务实现；如果是负责具体开发的大数据工程师，那么可以选择从下向上的学习，因为他们更关注具体的落实如何实现大数据计算。</p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs+express进阶思考]]></title>
      <url>http://oneblog.top/2016/04/15/infotech/nodejs/nodejs+express%E8%BF%9B%E9%98%B6%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>express-generator自动生成代码调查<br>keystone自动生成代码调查</p>
<p><a href="http://expressjs.com/" target="_blank" rel="external">express</a><br><a href="http://expressjs.com/en/api.html" target="_blank" rel="external">express 4.x API</a> <a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="external">中文</a><br><a href="https://nodejs.org/docs/latest/api/" target="_blank" rel="external">nodejs API</a> <a href="http://nodeapi.ucdok.com/#/api/" target="_blank" rel="external">中文</a></p>
<ul>
<li><a href="https://www.npmjs.com/package/assetmanager" target="_blank" rel="external">assetmanager</a></li>
<li><a href="https://www.npmjs.com/package/express-session" target="_blank" rel="external">express-session</a></li>
<li><a href="https://www.npmjs.com/package/passport" target="_blank" rel="external">passport</a></li>
<li><a href="https://www.npmjs.com/package/express-jwt" target="_blank" rel="external">express-jwt</a></li>
<li><a href="https://www.npmjs.com/package/jwt-simple" target="_blank" rel="external">jwt-simple</a></li>
<li><a href="https://www.npmjs.com/package/express-cluster" target="_blank" rel="external">express-cluster</a></li>
<li><a href="https://www.npmjs.com/package/express-flash" target="_blank" rel="external">express-flash</a></li>
<li><a href="https://www.npmjs.com/package/cookie-parser" target="_blank" rel="external">cookie-parser</a></li>
<li><a href="https://www.npmjs.com/package/cookie" target="_blank" rel="external">cookie</a></li>
<li><a href="https://www.npmjs.com/package/debug" target="_blank" rel="external">debug</a></li>
<li><a href="https://www.npmjs.com/package/hbs" target="_blank" rel="external">hbs</a></li>
<li><a href="https://www.npmjs.com/package/morgan" target="_blank" rel="external">morgan</a></li>
<li><a href="https://www.npmjs.com/package/serve-favicon" target="_blank" rel="external">serve-favicon</a></li>
<li><a href="https://www.npmjs.com/package/express-handlebars" target="_blank" rel="external">express-handlebars</a></li>
<li><a href="https://www.npmjs.com/package/mocha" target="_blank" rel="external">mocha</a></li>
<li><a href="https://www.npmjs.com/package/chai" target="_blank" rel="external">chai</a></li>
<li><a href="https://www.npmjs.com/package/lodash" target="_blank" rel="external">lodash</a></li>
<li><a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="external">dotenv</a></li>
<li><a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="external">body-parser</a></li>
<li><a href="https://www.npmjs.com/package/multiparty" target="_blank" rel="external">multiparty</a></li>
<li><a href="https://www.npmjs.com/package/connect-multiparty" target="_blank" rel="external">connect-multiparty</a></li>
<li><a href="https://www.npmjs.com/package/mysql" target="_blank" rel="external">mysql</a></li>
<li><a href="https://www.npmjs.com/package/openshift-express" target="_blank" rel="external">openshift-express</a></li>
</ul>
<h3 id="其它工具"><a href="#其它工具" class="headerlink" title="其它工具"></a>其它工具</h3><ul>
<li><a href="http://news.oneapm.com/nodejs-express/" target="_blank" rel="external">OneAPM性能监控</a></li>
<li><a href="https://www.npmjs.com/package/eslint-config-airbnb" target="_blank" rel="external">eslint代码风格管理插件</a></li>
<li><a href="http://editorconfig.org/" target="_blank" rel="external">editorconfig</a></li>
<li><a href="https://packagecontrol.io/packages/EditorConfig" target="_blank" rel="external">sublime-editorconfig</a></li>
<li><a href="https://www.npmjs.com/package/supervisor" target="_blank" rel="external">supervisor</a></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[书籍列表]]></title>
      <url>http://oneblog.top/2016/04/14/books/%E4%B9%A6%E7%B1%8D%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h3 id="WEB开发"><a href="#WEB开发" class="headerlink" title="WEB开发"></a>WEB开发</h3><table>
<thead>
<tr>
<th>书名</th>
<th style="text-align:center">开始阅读</th>
<th style="text-align:center">结束阅读</th>
<th style="text-align:right">笔记完成</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTML5权威指南</td>
<td style="text-align:center">20160328</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>HTML.5与CSS3权威指南</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>图解CSS3核心技术与案例实战</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>深入理解Bootstrap</td>
<td style="text-align:center">20160327</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Bootstrap实战</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Bootstrap.Site.Blueprints</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>AngularJS权威教程(中文版)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Pro AngularJS</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>NodeJS开发指南</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>深入浅出NodeJS</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Node与Express开发</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>精通D3.js:交互式数据可视化高级编程</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><table>
<thead>
<tr>
<th>书名</th>
<th style="text-align:center">开始阅读</th>
<th style="text-align:center">结束阅读</th>
<th style="text-align:right">笔记完成</th>
</tr>
</thead>
<tbody>
<tr>
<td>大数据时代</td>
<td style="text-align:center">20160411</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>数据新常态</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>决战大数据</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>大数据分析 数据科学应用场景与实践精髓</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>数据之美:一本书学会可视化设计</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>大数据可视化：重构智慧社会</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>超越可视化：DT时代的大数据沟通与决策</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>可视化沟通:用信息图表设计让数据说话(全彩)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>视觉繁美:信息可视化方法与案例解析</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>不只是美:信息图表设计原理与经典案例</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>写给程序员的数据挖掘实践指南</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>如何成为一名数据科学家</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>程序员的数学</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>程序员的数学2:概率统计</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>程序员的数学3:线性代数</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Spark MLlib机器学习实践</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Spark MLlib机器学习：算法、源码及实战详解</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
</tbody>
</table>
<h3 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h3><table>
<thead>
<tr>
<th>书名</th>
<th style="text-align:center">开始阅读</th>
<th style="text-align:center">结束阅读</th>
<th style="text-align:right">笔记完成</th>
</tr>
</thead>
<tbody>
<tr>
<td>测试驱动开发的艺术</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Selenium 2自动化测试实战:基于Python语言</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>单元测试的艺术</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>验收测试驱动开发</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>Google软件测试之道</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>代码整洁之道</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>敏捷软件开发</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>移动APP测试实践</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
</tbody>
</table>
<h3 id="软件生涯"><a href="#软件生涯" class="headerlink" title="软件生涯"></a>软件生涯</h3><table>
<thead>
<tr>
<th>书名</th>
<th style="text-align:center">开始阅读</th>
<th style="text-align:center">结束阅读</th>
<th style="text-align:right">笔记完成</th>
</tr>
</thead>
<tbody>
<tr>
<td>程序员修炼之道：从小工到专家</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<td>成为技术领导者</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
</tbody>
</table>
<h3 id="社会科学"><a href="#社会科学" class="headerlink" title="社会科学"></a>社会科学</h3><table>
<thead>
<tr>
<th>书名</th>
<th style="text-align:center">开始阅读</th>
<th style="text-align:center">结束阅读</th>
<th style="text-align:right">笔记完成</th>
</tr>
</thead>
<tbody>
<tr>
<td>赢在影响力：人际交往的学问</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:right">-</td>
</tr>
</tbody>
</table>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript]]></title>
      <url>http://oneblog.top/2015/11/06/infotech/code-example/javascript/base-1/</url>
      <content type="html"><![CDATA[<p><a href="http://www.iteye.com/topic/785445" target="_blank" rel="external">Javascript的连续赋值运算</a><br>实际工作中，应该不会有谁遭遇如此写法的语句。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;n:<span class="number">1</span>&#125;;  </div><div class="line"><span class="keyword">var</span> b = a; <span class="comment">// 持有a，以回查  </span></div><div class="line">a.x = a = &#123;n:<span class="number">2</span>&#125;;        <span class="comment">// 等价于 a.x = (a = &#123;n:2&#125;)</span></div><div class="line">alert(a.x);<span class="comment">// --&gt; undefined  </span></div><div class="line">alert(b.x);<span class="comment">// --&gt; [object Object]</span></div></pre></td></tr></table></figure>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function <span class="function"><span class="keyword">fun</span>()&#123;  </span></div><div class="line">    <span class="title">var</span> a = b = <span class="number">5</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">fun</span>();  </span></div><div class="line"><span class="title">alert</span>(<span class="keyword">typeof</span> a); <span class="regexp">//</span> --&gt; undefined  </div><div class="line">alert(<span class="keyword">typeof</span> b); <span class="regexp">//</span> --&gt; number ， b溢出成为了全局变量</div></pre></td></tr></table></figure>
<blockquote>
<p>连续赋值语句中，特别注意每个变量需要用var声明，否则未定义的变量会直接成为了全局变量</p>
</blockquote>
<p>Javascript语句末尾是否需要加分号的问题，<a href="http://hax.iteye.com/blog/1563585" target="_blank" rel="external">参考文档</a>， <a href="http://www.blueidea.com/tech/web/2009/7261.asp" target="_blank" rel="external">参考文档</a></p>
<blockquote>
<p>建议不要在Javascript语句末尾加上分号。此时需要处理一些特殊情况，即在下一行的开头是 [ (  + - / 等时，上一行不会被自动加上分号；因此需要在下一行开头加上分号</p>
</blockquote>
<p>document.querySelectorAll()返回的是NodeList，其只有item(idx)方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line"></div><div class="line">[].forEach.call(divs, <span class="function"><span class="keyword">function</span>(<span class="params">div</span>) </span>&#123;</div><div class="line">  <span class="comment">// do whatever</span></div><div class="line">  div.style.color = <span class="string">"red"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Array.prototype.forEach.call(…)也是相同的用法，当然[].forEach.call(…)简洁。</p>
</blockquote>
<p>还可以将NodeList转换成Array</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div_list = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>); <span class="comment">// returns NodeList</span></div><div class="line"><span class="keyword">var</span> div_array = <span class="built_in">Array</span>.prototype.slice.call(div_list); <span class="comment">// 方法一，slice</span></div><div class="line"><span class="keyword">var</span> div_array = [...div_list];  <span class="comment">// 方法二， ...</span></div><div class="line"><span class="keyword">var</span> div_array = <span class="built_in">Array</span>.from(div_list);  <span class="comment">// 方法三， Array.from</span></div></pre></td></tr></table></figure>
<blockquote>
<p>…是ES6中未确定的方法，暂不推荐使用<br>Array.from用法很丰富，需要时再细查，以下几个例子可以看看</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Set</span></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Set([<span class="string">"foo"</span>, <span class="built_in">window</span>]);</div><div class="line"><span class="built_in">Array</span>.from(s);   </div><div class="line"><span class="comment">// ["foo", window]</span></div><div class="line"></div><div class="line"><span class="comment">// Map</span></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> Map([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]);</div><div class="line"><span class="built_in">Array</span>.from(m);                          </div><div class="line"><span class="comment">// [[1, 2], [2, 4], [4, 8]]  </span></div><div class="line"></div><div class="line"><span class="comment">// String</span></div><div class="line"><span class="built_in">Array</span>.from(<span class="string">"foo"</span>);                      </div><div class="line"><span class="comment">// ["f", "o", "o"]</span></div><div class="line"></div><div class="line"><span class="comment">// Using an arrow function as the map function to</span></div><div class="line"><span class="comment">// manipulate the elements</span></div><div class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x + x);      </div><div class="line"><span class="comment">// [2, 4, 6]</span></div><div class="line"></div><div class="line"><span class="comment">// Generate a sequence of numbers</span></div><div class="line"><span class="built_in">Array</span>.from(&#123;length: <span class="number">5</span>&#125;, <span class="function">(<span class="params">v, k</span>) =&gt;</span> k);    </div><div class="line"><span class="comment">// [0, 1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SVG<span class="selector-class">.supported</span> = (function() &#123;</div><div class="line">  return !! document<span class="selector-class">.createElementNS</span> &amp;&amp;</div><div class="line">         !! document.createElementNS(SVG<span class="selector-class">.ns</span>,<span class="string">'svg'</span>)<span class="selector-class">.createSVGRect</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-theme-next和微搜索]]></title>
      <url>http://oneblog.top/2015/10/14/infotech/hexo/hexo-tinysou/</url>
      <content type="html"><![CDATA[<p>全站搜索是每个博客站点必须的功能。HEXO没有提供自带的搜索功能，需要外部支持。</p>
<p>目前HEXO全站搜索的主要方案有swiftype和微搜索，意外地发现swiftype已经开始收费，只好转投微搜索，这家号称免费版本永久不收费。</p>
<p>在此记录下基于HEXO的主题NEXT的整合微搜索的步骤。</p>
<a id="more"></a>
<h2 id="（步骤一）注册微搜索"><a href="#（步骤一）注册微搜索" class="headerlink" title="（步骤一）注册微搜索"></a>（步骤一）注册微搜索</h2><p>访问<a href="http://tinysou.com/" target="_blank" rel="external">微搜索</a>，并注册。</p>
<h2 id="（步骤二）创建搜索引擎"><a href="#（步骤二）创建搜索引擎" class="headerlink" title="（步骤二）创建搜索引擎"></a>（步骤二）创建搜索引擎</h2><p><img src="/images/hexo-next-tinysou-create-engine.png" alt="创建engine"><br><img src="/images/hexo-next-tinysou-engine-list.png" alt="engine列表"></p>
<h2 id="（步骤三）添加待搜索站点域名"><a href="#（步骤三）添加待搜索站点域名" class="headerlink" title="（步骤三）添加待搜索站点域名"></a>（步骤三）添加待搜索站点域名</h2><p><img src="/images/hexo-next-tinysou-add-domain.png" alt="在engine中添加待搜索站点域名"><br><img src="/images/hexo-next-tinysou-domain-list.png" alt="在engine中待搜索站点域名列表"></p>
<p>当域名对应的爬虫状态变为<code>finish</code>时，表示该站点的搜索索引已经创建完成。</p>
<h2 id="（步骤四）HEXO配置"><a href="#（步骤四）HEXO配置" class="headerlink" title="（步骤四）HEXO配置"></a>（步骤四）HEXO配置</h2><p>微搜索的配置，并非在HEXO的配置中，而是在其主题THEME的配置文件中设置。以NEXT主题为例，配置如下：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 微搜索</span></div><div class="line"><span class="symbol">tinysou_Key:</span> <span class="number">687</span>cxxxxxxxxxxxxx2df</div></pre></td></tr></table></figure>
<p>tinysou_Key的值，参照下图获取。</p>
<p><img src="/images/hexo-next-tinysou-get-enginekey.png" alt="获取微搜索的KEY"></p>
<h2 id="（步骤五）开始搜索"><a href="#（步骤五）开始搜索" class="headerlink" title="（步骤五）开始搜索"></a>（步骤五）开始搜索</h2><p><img src="/images/hexo-next-tinysou-try-1.png" alt="搜索体验-1"><br><img src="/images/hexo-next-tinysou-try-2.png" alt="搜索体验-2"></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu的cron任务运行日志]]></title>
      <url>http://oneblog.top/2015/10/06/infotech/linux/UBuntu/ubuntu-cron-log/</url>
      <content type="html"><![CDATA[<p>Ubuntu服务器版本<code>Ubuntu 12.04.5 LTS</code>，最近配置了一个hexo自动生成的定时任务，可惜没有正常执行，想查看下到底什么原因，就要从cron日志中去发现。</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/rsyslog.d/<span class="number">50</span>-default.conf</div><div class="line">cron.*              /<span class="built_in">var</span>/<span class="built_in">log</span>/cron.<span class="built_in">log</span>     # 删除该行注释</div><div class="line"></div><div class="line">sudo service rsyslog <span class="built_in">restart</span></div><div class="line">sudo service cron <span class="built_in">restart</span></div><div class="line"></div><div class="line">less /<span class="built_in">var</span>/<span class="built_in">log</span>/cron.<span class="built_in">log</span></div></pre></td></tr></table></figure>
<p><a href="http://www.linuxidc.com/Linux/2013-02/79044.htm" target="_blank" rel="external">参考文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> crontab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[精通正则表达式]]></title>
      <url>http://oneblog.top/2015/10/03/books/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E7%AC%AC%E4%B8%89%E7%89%88%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>正则表达式，虽然就目前工作而言，用的不多，但毫无疑问，正则表达式是每个专业IT人士的必要技能，为了更像专业人士，需要我更加深入的学习正则表达式。</p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>32页总结了所有元字符</p>
<p>行的起始和结束      ^$<br>字符组             […]<br>排除型字符组       [^…]<br>点号匹配任意字符     .<br>多选结构            (…|…)<br>忽略大小写<br>单词分界符           \&lt;><br>可选元素            ?<br>重复出现            <em> +<br>区间                …{min,max}<br>括号及反向引用       (…)(…)\1\2<br>转义                .\</em>\?+</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript的单元测试利器QUnit]]></title>
      <url>http://oneblog.top/2015/09/28/infotech/javascript/Qunit%E5%9F%BA%E7%A1%80/qunit/</url>
      <content type="html"><![CDATA[<p>十年前就听说过测试驱动开发，记得当时也很期望能在项目中应用，可是不知不觉一拖至今。最终还是因为做云图智这个产品，起初知识为了保证内部数据在各种操作后的正确性，避免不断的功能迭代可能带来的内部数据的错误，才开始真正有了做单元测试的意愿。</p>
<p>再次证明了一点，只有真正强烈的意愿，才有真正实施的动力；所以很可能我们总是在不经意间欺骗自己……</p>
<p>单元测试这东西，就上手而言，绝对是简单的，可以预见的未来，也不会有太复杂的地方。真正用一次，相信你一定会爱上它。因为它能够大大减少你在产品上测试的时间，大大降低你对产品BUG的莫名的担忧，让你的人生一下子有了舒展的希望。</p>
<p>单元测试写的好不好，就我个人的看法，技术上没有难度，而是在于对业务的理解以及自身代码的设计水平。</p>
<a id="more"></a>
<p>以下记录下，我对QUnit的学习情况，以备查询。</p>
<h2 id="单元测试概述（官方）"><a href="#单元测试概述（官方）" class="headerlink" title="单元测试概述（官方）"></a>单元测试概述（官方）</h2><p>官网上， Introduction to Unit Testing 都对单元测试做了简单的介绍，没有细看，应该也就是说明一下可以把一些测试项总结出来做成单元测试，有利于代码的重构。</p>
<p>Cookbook中对单元测试的相关方面做了介绍，包括：</p>
<ul>
<li>Automate unit test</li>
<li>Assert Result</li>
<li>Syn Callbacks</li>
<li>Asyn Callbacks（异步处理）</li>
<li>Test user actions</li>
<li>keeping test atomic（原子性）</li>
<li>Group test（模块化）</li>
<li>Custom Assertions（自定义断言方法）</li>
</ul>
<p>大部分QUnit中的代码都很容易理解，按照分类整理如下：</p>
<h2 id="Assert断言"><a href="#Assert断言" class="headerlink" title="Assert断言"></a>Assert断言</h2><p>QUnit.test()</p>
<ul>
<li>ok notOk</li>
<li>equal notEqual</li>
<li>propEqual notPropEqual</li>
<li>strictEqual notStrictEqual</li>
<li>deepEqual notDeepEqual</li>
</ul>
<h2 id="异步处理（async）"><a href="#异步处理（async）" class="headerlink" title="异步处理（async）"></a>异步处理（async）</h2><h2 id="预设预期（expect）"><a href="#预设预期（expect）" class="headerlink" title="预设预期（expect）"></a>预设预期（expect）</h2><h2 id="自定义断言（push）"><a href="#自定义断言（push）" class="headerlink" title="自定义断言（push）"></a>自定义断言（push）</h2><h2 id="模块化单元测试（module）"><a href="#模块化单元测试（module）" class="headerlink" title="模块化单元测试（module）"></a>模块化单元测试（module）</h2><p>QUnit.module()</p>
<h2 id="各阶段回调函数"><a href="#各阶段回调函数" class="headerlink" title="各阶段回调函数"></a>各阶段回调函数</h2><p>QUnit.begin()<br>    QUnit.moduleStart()<br>        QUnit.testStart()<br>            QUnit.log()<br>        QUnit.testDone()<br>    QUnit.moduleDone()<br>QUnit.done()</p>
<h2 id="扩展用法（extend）"><a href="#扩展用法（extend）" class="headerlink" title="扩展用法（extend）"></a>扩展用法（extend）</h2><p>QUnit.extend()</p>
<h2 id="输出堆栈内容（stack）"><a href="#输出堆栈内容（stack）" class="headerlink" title="输出堆栈内容（stack）"></a>输出堆栈内容（stack）</h2><p>QUnit.stack()</p>
<h2 id="待进一步调查"><a href="#待进一步调查" class="headerlink" title="待进一步调查"></a>待进一步调查</h2><ul>
<li>throws</li>
<li>QUnit.skip()</li>
<li>QUnit.config</li>
<li>QUnit.dump.parse()</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> qunit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery事件命名空间 event namespace]]></title>
      <url>http://oneblog.top/2015/09/24/infotech/javascript/jQuery%E5%9F%BA%E7%A1%80/jquery-namespace/</url>
      <content type="html"><![CDATA[<p>jQuery事件的命名空间初看觉得没啥，仔细用来起发现还是有些道道，在这次总结下，免得用起来手忙脚乱。</p>
<h2 id="命名空间事件范例"><a href="#命名空间事件范例" class="headerlink" title="命名空间事件范例"></a>命名空间事件范例</h2><p>带有命名空间的事件，一般是这种形式 <code>event.namespace1.namespace2.namesspace3</code>。</p>
<blockquote>
<p>带命名空间的事件名称，最前面，必须是event名称，event后面只能是命名空间，可以带多个。</p>
</blockquote>
<p>，比如bootstrap中常见的一些带命名空间的事件名称如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">show<span class="selector-class">.bs</span><span class="selector-class">.tab</span></div><div class="line">shown<span class="selector-class">.bs</span><span class="selector-class">.tab</span></div><div class="line">hide<span class="selector-class">.bs</span><span class="selector-class">.tab</span></div><div class="line">hidden<span class="selector-class">.bs</span><span class="selector-class">.tab</span></div><div class="line">show<span class="selector-class">.bs</span><span class="selector-class">.tooltip</span></div><div class="line">shown<span class="selector-class">.bs</span><span class="selector-class">.tooltip</span></div><div class="line">hide<span class="selector-class">.bs</span><span class="selector-class">.tooltip</span></div><div class="line">hidden<span class="selector-class">.bs</span><span class="selector-class">.tooltip</span></div><div class="line">inserted<span class="selector-class">.bs</span><span class="selector-class">.tooltip</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="回调函数触发方式"><a href="#回调函数触发方式" class="headerlink" title="回调函数触发方式"></a>回调函数触发方式</h2><blockquote>
<p>注意，trigger的事件字符串中，最前面的必须是事件，如果不是事件而是命名空间的话，无法触发。</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function handler(event) &#123;</div><div class="line">    console.<span class="built_in">log</span>(<span class="string">"trigger event: "</span> + event.namespace);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> <span class="variable">$body</span> = $(<span class="string">"body"</span>);</div><div class="line"><span class="variable">$body</span>.<span class="keyword">on</span>(<span class="string">"doing.foo.bar.example"</span>, handler);         <span class="comment">// A</span></div><div class="line"><span class="variable">$body</span>.<span class="keyword">on</span>(<span class="string">"doing.foo.bar."</span>, handler);                <span class="comment">// B</span></div><div class="line"><span class="variable">$body</span>.<span class="keyword">on</span>(<span class="string">"doing.foo.example"</span>, handler);             <span class="comment">// C</span></div><div class="line"><span class="variable">$body</span>.<span class="keyword">on</span>(<span class="string">"doing.foo.white"</span>, handler);               <span class="comment">// D</span></div><div class="line"></div><div class="line"><span class="variable">$body</span>.trigger(<span class="string">"doing"</span>);     <span class="comment">// 触发ABCD，输出四次 trigger event: </span></div><div class="line"><span class="variable">$body</span>.trigger(<span class="string">".foo"</span>);      <span class="comment">// 没有输出</span></div><div class="line"><span class="variable">$body</span>.trigger(<span class="string">"foo"</span>);       <span class="comment">// 没有输出</span></div><div class="line"><span class="variable">$body</span>.trigger(<span class="string">"doing.foo.bar.example"</span>); <span class="comment">// 触发A，输出 trigger event: bar.example.foo</span></div><div class="line"><span class="variable">$body</span>.trigger(<span class="string">"doing.foo.example"</span>);     <span class="comment">// 触发AC，输出两次 trigger event: example.foo</span></div><div class="line"><span class="variable">$body</span>.trigger(<span class="string">"doing.bar.white"</span>);       <span class="comment">// 没有输出（没有配置同时处于bar和white这两个命名空间的doing事件）</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[不懂带人-你就自己干到死]]></title>
      <url>http://oneblog.top/2015/09/23/books/%E4%B8%8D%E6%87%82%E5%B8%A6%E4%BA%BA-%E4%BD%A0%E5%B0%B1%E8%87%AA%E5%B7%B1%E5%B9%B2%E5%88%B0%E6%AD%BB/</url>
      <content type="html"><![CDATA[<p>这是一本从心理学角度出发，讲述如何让员工真正发自内心的工作的书籍。</p>
<p>很好，我们不是为了欺骗，而是真的愿意让员工成长，一同分享公司的成长。但是，由于个人成长经历等方面的种种原因，造成某些事情处理态度或方法上的不足或根本错误，没有让员工充分感受到这一点。</p>
<p>这本书讲的很好，充分的阐述了员工们需要什么，作为管理者的话，又要做些什么，很好，书中有不少很好的例子，启发性的话语，都值得我们学习和应用，值得常常翻阅一下！</p>
<h2 id="最大收获"><a href="#最大收获" class="headerlink" title="最大收获"></a>最大收获</h2><p>这本书给我的最大收获，主要有三点，聚焦答案、培养工作关系、经常整理自己的资源。</p>
<h2 id="意外收获"><a href="#意外收获" class="headerlink" title="意外收获"></a>意外收获</h2><p>在读这本书的时候，我意外地收获了一个重要的读书提示。以往，每读一本书，我都潜意识地想要掌握这本书提到的每个重点，甚至每个信息，这种求大求全的行为，无疑给我带来了巨大的负担，导致了事倍功半的结果。</p>
<p>认识到这一点，从此，我不会再追求大而全，而是抓住书中的最重要的信息即可，其它可以通过读其它书的时候，再来互相印证，更加有利于知识的摄取和巩固，而不是要求自己毕全功于一本书。</p>
<h2 id="其它重要内容"><a href="#其它重要内容" class="headerlink" title="其它重要内容"></a>其它重要内容</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript原生解析URL]]></title>
      <url>http://oneblog.top/2015/09/19/infotech/javascript/javascript%E6%8A%80%E5%B7%A7/javascript-createElement-a-url-parser/</url>
      <content type="html"><![CDATA[<p>曾经一直认为使用javascript解析URL，最好要使用相应的JS库，今天突然找到了更简单的办法，值得记录一下。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> parser = document.createElement(<span class="string">'a'</span>)</div><div class="line"></div><div class="line">parser<span class="selector-class">.href</span> = <span class="string">"http://oneblog.top/2015/09/14/javascript/javascript-json/query?param1=111&amp;param2=222"</span></div><div class="line">&gt;&gt; <span class="string">"http://oneblog.top/2015/09/14/javascript/javascript-json/query?param1=111&amp;param2=222"</span></div><div class="line"></div><div class="line">parser<span class="selector-class">.protocol</span></div><div class="line">&gt;&gt; <span class="string">"http:"</span></div><div class="line"></div><div class="line">parser<span class="selector-class">.pathname</span></div><div class="line">&gt;&gt; <span class="string">"/2015/09/14/javascript/javascript-json/query"</span></div><div class="line"></div><div class="line">parser<span class="selector-class">.search</span></div><div class="line">&gt;&gt; <span class="string">"?param1=111&amp;param2=222"</span></div><div class="line"></div><div class="line">parser<span class="selector-class">.host</span></div><div class="line">&gt;&gt; <span class="string">"oneblog.top"</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript的继承]]></title>
      <url>http://oneblog.top/2015/09/19/infotech/javascript/javascript%E5%9F%BA%E7%A1%80/javascript-class-relative-3/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/a6c005228a75" target="_blank" rel="external">讲解最清晰的参考文档</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">官方的Object.create</a></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="title">function</span> <span class="type">AAA</span>() &#123;&#125;</div><div class="line"><span class="title">function</span> <span class="type">BBB</span>() &#123;&#125;</div><div class="line"><span class="type">BBB</span>.proto<span class="keyword">type</span> = new <span class="type">AAA</span>()</div><div class="line"><span class="title">function</span> <span class="type">CCC</span>() &#123;&#125;</div><div class="line"><span class="type">CCC</span>.proto<span class="keyword">type</span> = new <span class="type">BBB</span>();</div><div class="line"></div><div class="line"><span class="title">var</span> ccc = new <span class="type">CCC</span>()</div><div class="line"></div><div class="line"><span class="title">ccc</span>.constructor         // function <span class="type">AAA</span>() &#123;&#125;</div><div class="line"></div><div class="line"><span class="title">ccc</span> instanceof <span class="type">CCC</span>      // true</div><div class="line"><span class="title">ccc</span> instanceof <span class="type">BBB</span>      // true</div><div class="line"><span class="title">ccc</span> instanceof <span class="type">AAA</span>      // true</div><div class="line"></div><div class="line"><span class="type">CCC</span>.proto<span class="keyword">type</span>.isPrototypeOf(ccc)</div><div class="line"><span class="type">BBB</span>.proto<span class="keyword">type</span>.isPrototypeOf(ccc)</div><div class="line"><span class="type">AAA</span>.proto<span class="keyword">type</span>.isPrototypeOf(ccc)</div><div class="line"></div><div class="line"><span class="type">CCC</span>.proto<span class="keyword">type</span>.isPrototypeOf(ccc)</div><div class="line"><span class="title">true</span></div><div class="line"><span class="type">BBB</span>.proto<span class="keyword">type</span>.isPrototypeOf(ccc)</div><div class="line"><span class="title">true</span></div><div class="line"><span class="type">AAA</span>.proto<span class="keyword">type</span>.isPrototypeOf(ccc)</div><div class="line"><span class="title">true</span></div><div class="line"><span class="title">ccc</span>.__proto__</div><div class="line"><span class="type">BBB</span> &#123;&#125;</div><div class="line"><span class="title">ccc</span>.__proto__.constructor</div><div class="line"><span class="type">AAA</span>() &#123;&#125;</div><div class="line"><span class="title">ccc</span>.__proto__.__proto__</div><div class="line"><span class="type">AAA</span> &#123;&#125;</div><div class="line"><span class="title">ccc</span>.__proto__.__proto__.__proto__</div><div class="line"><span class="type">AAA</span> &#123;&#125;constructor: <span class="type">AAA</span>()__proto__: <span class="type">Object</span></div><div class="line"><span class="title">ccc</span>.__proto__.__proto__.__proto__.__proto__</div><div class="line"><span class="type">Object</span> &#123;&#125;</div><div class="line"><span class="title">ccc</span>.__proto__.__proto__.__proto__.__proto__.__proto__</div><div class="line"><span class="title">null</span></div><div class="line"><span class="title">ccc</span>.__proto__.__proto__ === <span class="type">AAA</span>.proto<span class="keyword">type</span></div><div class="line"><span class="title">false</span></div><div class="line"><span class="title">ccc</span>.__proto__ === <span class="type">AAA</span>.proto<span class="keyword">type</span></div><div class="line"><span class="title">false</span></div><div class="line"><span class="title">ccc</span>.__proto__.__proto__.__proto__ === <span class="type">AAA</span>.proto<span class="keyword">type</span></div><div class="line"><span class="title">true</span></div><div class="line"><span class="title">ccc</span>.__proto__ === <span class="type">CCC</span>.proto<span class="keyword">type</span></div><div class="line"><span class="title">true</span></div><div class="line"><span class="title">ccc</span>.__proto__.__proto__ === <span class="type">BBB</span>.proto<span class="keyword">type</span></div><div class="line"><span class="title">true</span></div><div class="line"><span class="type">BBB</span>.proto<span class="keyword">type</span></div><div class="line"><span class="type">AAA</span> &#123;&#125;</div><div class="line"><span class="type">AAA</span>.proto<span class="keyword">type</span></div><div class="line"><span class="type">AAA</span> &#123;&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript的constructor|prototype|__proto__等总结]]></title>
      <url>http://oneblog.top/2015/09/19/infotech/javascript/javascript%E5%9F%BA%E7%A1%80/javascript-class-relative-1/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line"><span class="keyword">typeof</span>(person.__proto__)                            <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span>(Person.prototype)                            <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span>(person)                                      <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span>(Person)                                      <span class="comment">// function</span></div><div class="line"><span class="keyword">typeof</span>(Person.__proto__)                            <span class="comment">// function</span></div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">Function</span>.prototype)                          <span class="comment">// function</span></div><div class="line"></div><div class="line">Person.__proto__ === <span class="built_in">Function</span>.prototype             <span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span>.prototype.isPrototypeOf(Person)            <span class="comment">// true</span></div><div class="line"></div><div class="line">person.__proto__ === Person.prototype               <span class="comment">// true</span></div><div class="line">Person.prototype.isPrototypeOf(person)              <span class="comment">// true</span></div><div class="line"></div><div class="line">person.__proto__ === person.constructor.prototype   <span class="comment">// true</span></div><div class="line">person.constructor === Person</div><div class="line">person.constructor === person.__proto__.constructor <span class="comment">// true</span></div><div class="line"></div><div class="line">person.constructor.prototype === Person.prototype   <span class="comment">// true</span></div><div class="line">person.constructor.prototype <span class="keyword">instanceof</span> Person      <span class="comment">// false，Person是函数（构造函数），prototype是Ojbect子类</span></div><div class="line">person.constructor.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>      <span class="comment">// true</span></div><div class="line"></div><div class="line">person <span class="keyword">instanceof</span> person.constructor                <span class="comment">// true</span></div><div class="line">person.__proto__ <span class="keyword">instanceof</span> person.constructor      <span class="comment">// false</span></div><div class="line">person.__proto__ <span class="keyword">instanceof</span> <span class="built_in">Object</span>                  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>Javascript中的所有对象都继承自Object</p>
<p>constructor是Object的一个属性，他指向：创建对象的函数的引用（指针）。（可以理解为constructor指向对象的构造函数）</p>
<p>prototype：构造器的原型，只有函数才具有这个属性,一般来说这个属性值应该是一个 “纯粹的” Object 类型对象(“[object Object]”)，如果过设置为其他类型，可能会有一些意外。</p>
<p>任何一个由构造器产生的对象都有<strong>proto</strong>属性，且此属性指向该构造器的prototype；所有构造器/函数的<strong>proto</strong>都指向Function的prototype（它是一个空函数（Empty function））</p>
<p>hasOwnProperty：如果对象obj上的属性property不是继承的来的，则obj.hasOwnProperty(‘property’)返回true</p>
<p>delete：删除对象自身上的属性，不能删除继承来的属性，不能删除使用 var 声明的变量 ,不能删除函数声明，但是在如果在 firebug 和 IE9 的调试器里面执行代码，会发现全局变量被删除了，实际上这在页面上的代码中是不会发生的事。 另外，数组的 length 属性是不能删除的。</p>
<p>in：如果对象 obj  有属性 property(包括继承来的和不可列举属性)，不同于 for in 循环中的 in,for in 忽略了不可列举属性)， 则’property’ in obj 返回 true，这个运算不存在于初期版本的javascript。 </p>
<p>propertyIsEnumerable：如果对象obj上的属性property可以被列举出来(可被 for in 循环遍历),则 obj.propertyIsEnumerable(‘property’) 返回true，值得注意的是，propertyIsEnumerable对继承来的属性一律判断为false,这一般被认为是ECMA Script 规范的一个设计上的错误。</p>
<p>instanceof：如果obj对象是构造函数Fun的一个实例，则 obj instanceof Fun 返回 true，</p>
<p>值得注意的是，instanceof 并不检查 Fun 函数，其检测是基于”原形链”的，如果 Fun.prototype == obj.<strong>proto</strong> 为 true, 或者 Fun.prototype.isPrototypeOf(obj)  为 true , 即 Fun.prototype.isPrototypeOf(obj) === true , 则 obj instcaneof Fun 返回 true . </p>
<p>因此，即使 obj instanceof Fun 返回 true，obj 也可能不具有 Fun 构造器中定义的属性，因为 Fun 不一定是 obj 的构造器。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript的继承]]></title>
      <url>http://oneblog.top/2015/09/19/infotech/javascript/javascript%E5%9F%BA%E7%A1%80/javascript-class-relative-2/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/snandy/archive/2012/09/01/2664134.html" target="_blank" rel="external">参考文档一</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/24423881" target="_blank" rel="external">参考文档二</a><br><a href="http://jingyan.baidu.com/article/29697b912f9939ab20de3c8c.html" target="_blank" rel="external">参考文档三</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">Boolean</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line"><span class="built_in">String</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line"><span class="built_in">Array</span>.__proto__ === <span class="built_in">Function</span>.prototype   <span class="comment">// true</span></div><div class="line"><span class="built_in">RegExp</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">Error</span>.__proto__ === <span class="built_in">Function</span>.prototype   <span class="comment">// true</span></div><div class="line"><span class="built_in">Date</span>.__proto__ === <span class="built_in">Function</span>.prototype    <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>JavaScript中有内置(build-in)构造器/对象共计12个（ES5中新加了JSON），这里列举了可访问的8个构造器。剩下如Global不能直接访问，Arguments仅在函数调用时由JS引擎创建，Math，JSON是以对象形式存在的，无需new。它们的<strong>proto</strong>是Object.prototype。如下</p>
<p>Math.<strong>proto</strong> === Object.prototype  // true<br>JSON.<strong>proto</strong> === Object.prototype  // true</p>
<p><a href="http://blog.sina.com.cn/s/blog_70a3539f0102v41r.html" target="_blank" rel="external">最变态最混乱的继承关系</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[初步应用HAPROXY]]></title>
      <url>http://oneblog.top/2015/09/18/infotech/linux/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/haproxy/</url>
      <content type="html"><![CDATA[<p>久仰HAPROXY大名已经很久了，昨日终于由于项目需要有机会进行了尝试，果然还是不错的。</p>
<p>项目中，由于网络限制的原因，tcp服务的访问必须要经由某台服务器进行中转。因为现网环境不便测试，所以使用了redis进行haproxy的tcp代理功能的验证。</p>
<p><a href="http://www.haproxy.com/" target="_blank" rel="external">haproxy官网</a></p>
<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p><a href="http://www.haproxy.org/download/1.5/src/" target="_blank" rel="external">haproxy下载地址</a></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd haproxy<span class="number">-1.5</span><span class="number">.14</span></div><div class="line">make TARGET=linux26</div></pre></td></tr></table></figure>
<p>编译完成后，会在当前目录下生成可执行文件haproxy。</p>
<h2 id="haproxy的tcp代理配置"><a href="#haproxy的tcp代理配置" class="headerlink" title="haproxy的tcp代理配置"></a>haproxy的tcp代理配置</h2><p><a href="https://cbonte.github.io/haproxy-dconv/configuration-1.5.html" target="_blank" rel="external">haproxy配置参考文档</a></p>
<p>可以从src/examples目录下找到haproxy.cfg文件，参照进行修改。</p>
<p>以下配置，开放端口25000，提供tcp中转到本机12310端口（redis服务端口）的服务。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">global</span></div><div class="line">    <span class="selector-tag">log</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>   <span class="selector-tag">local0</span></div><div class="line">    <span class="selector-tag">log</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>   <span class="selector-tag">local1</span> <span class="selector-tag">notice</span></div><div class="line">    <span class="selector-tag">maxconn</span> 4096</div><div class="line">    <span class="selector-tag">daemon</span></div><div class="line">    <span class="selector-id">#debug</span></div><div class="line">    <span class="selector-id">#quiet</span></div><div class="line"></div><div class="line"><span class="selector-tag">defaults</span></div><div class="line">    <span class="selector-tag">log</span> <span class="selector-tag">global</span></div><div class="line">    <span class="selector-tag">option</span>  <span class="selector-tag">dontlognull</span></div><div class="line">    <span class="selector-tag">retries</span> 3</div><div class="line">    <span class="selector-tag">maxconn</span> 2000</div><div class="line"></div><div class="line"><span class="selector-tag">listen</span> <span class="selector-tag">tcp_transfer</span></div><div class="line">    <span class="selector-tag">mode</span> <span class="selector-tag">tcp</span></div><div class="line">    <span class="selector-tag">bind</span> <span class="selector-pseudo">:25000</span></div><div class="line">    <span class="selector-tag">server</span> <span class="selector-tag">localhost1</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:12310</span></div></pre></td></tr></table></figure>
<h2 id="启动haproxy"><a href="#启动haproxy" class="headerlink" title="启动haproxy"></a>启动haproxy</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.<span class="regexp">/haproxy -f ./</span>haproxy.cfg</div></pre></td></tr></table></figure>
<h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis-<span class="keyword">cli</span> -p <span class="number">12310</span>      <span class="meta"># 先直接访问redis服务的12310端口，执行 keys *，get 等操作</span></div><div class="line">redis-<span class="keyword">cli</span> -p <span class="number">25000</span>      <span class="meta"># 再访问haproxy的中转端口，执行相同命令，查看结果是否一致</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[遍历JSON和ARRAY数据]]></title>
      <url>http://oneblog.top/2015/09/14/infotech/javascript/javascript%E5%9F%BA%E7%A1%80/javascript-json/</url>
      <content type="html"><![CDATA[<p>遍历JSON数据结构是个常见的数据处理需求。</p>
<h2 id="JSON-ARRAY数据遍历通用的两种方法"><a href="#JSON-ARRAY数据遍历通用的两种方法" class="headerlink" title="JSON|ARRAY数据遍历通用的两种方法"></a>JSON|ARRAY数据遍历通用的两种方法</h2><h3 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> json = &#123; <span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">for</span> (<span class="built_in">var</span> <span class="built_in">key</span> <span class="keyword">in</span> json) &#123;</div><div class="line">    console.<span class="built_in">log</span>(<span class="built_in">key</span>, json[<span class="built_in">key</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： for-in会输出自有属性，可以使用hasOwnProperty函数判断是否自有属性，并进行过滤。</p>
</blockquote>
<a id="more"></a>
<h3 id="jQuery-each"><a href="#jQuery-each" class="headerlink" title="jQuery-each"></a>jQuery-each</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = &#123; <span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span> &#125;;</div><div class="line">$.each(json, <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(key, val);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="仅可用于ARRAY数组遍历的一种方法"><a href="#仅可用于ARRAY数组遍历的一种方法" class="headerlink" title="仅可用于ARRAY数组遍历的一种方法"></a>仅可用于ARRAY数组遍历的一种方法</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = &#123; <span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>,<span class="built_in">len</span>=json.length; i&lt;<span class="built_in">len</span>; i++) &#123;</div><div class="line">    console.log(i, json[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：json.length，json数据没有length属性</p>
</blockquote>
<h2 id="ARRAY数组遍历特殊情况"><a href="#ARRAY数组遍历特殊情况" class="headerlink" title="ARRAY数组遍历特殊情况"></a>ARRAY数组遍历特殊情况</h2><h3 id="数据缺失"><a href="#数据缺失" class="headerlink" title="数据缺失"></a>数据缺失</h3><blockquote>
<p>当array数组中有缺失数据时，for和jQuery.each遍历时，会把空数据的位置也一并处理了。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = []</div><div class="line">arr[<span class="number">3</span>] = <span class="string">"c"</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>,<span class="built_in">len</span>=arr.length; i&lt;<span class="built_in">len</span>; i++) &#123;</div><div class="line">    console.log(i, arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span>undefined</div><div class="line"><span class="symbol">1 </span>undefined</div><div class="line"><span class="symbol">2 </span>undefined</div><div class="line"><span class="symbol">3 </span><span class="string">"c"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>for-in不会输出空数据的位置，但是，会输出自有属性的信息</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> arr = []</div><div class="line">arr[<span class="number">3</span>] = <span class="string">"c"</span></div><div class="line"><span class="keyword">for</span> (<span class="built_in">var</span> <span class="built_in">key</span> <span class="keyword">in</span> arr) &#123;</div><div class="line">    console.<span class="built_in">log</span>(<span class="built_in">key</span>, arr[<span class="built_in">key</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> c</div><div class="line">remove Array.remove(from, to)</div><div class="line">removeSvgByHref Array.removeSvgByHref(<span class="keyword">node</span><span class="title">)</span></div><div class="line">removeNode Array.removeNode(<span class="keyword">node</span><span class="title">)</span></div><div class="line">indexNode Array.indexNode(<span class="keyword">node</span><span class="title">)</span></div></pre></td></tr></table></figure></p>
<h3 id="自有属性"><a href="#自有属性" class="headerlink" title="自有属性"></a>自有属性</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> arr = []</div><div class="line">arr[<span class="number">3</span>] = <span class="string">"c"</span></div><div class="line"><span class="keyword">for</span> (<span class="built_in">var</span> <span class="built_in">key</span> <span class="keyword">in</span> arr) &#123;</div><div class="line">    // 自有属性过滤</div><div class="line">    <span class="keyword">if</span> (arr.hasOwnProperty(<span class="built_in">key</span>)) &#123;</div><div class="line">        console.<span class="built_in">log</span>(<span class="built_in">key</span>, arr[<span class="built_in">key</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据类型检测（ARRAY-简单对象-JSON-空对象）"><a href="#数据类型检测（ARRAY-简单对象-JSON-空对象）" class="headerlink" title="数据类型检测（ARRAY|简单对象(JSON)|空对象）"></a>数据类型检测（ARRAY|简单对象(JSON)|空对象）</h2><h3 id="检测是否ARRAY"><a href="#检测是否ARRAY" class="headerlink" title="检测是否ARRAY"></a>检测是否ARRAY</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">jQuery</span><span class="selector-class">.isArray</span>(&#123;&#125;)      <span class="comment">// false</span></div><div class="line"><span class="selector-tag">jQuery</span><span class="selector-class">.isArray</span>([])      <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="检测是否简单对象"><a href="#检测是否简单对象" class="headerlink" title="检测是否简单对象"></a>检测是否简单对象</h3><blockquote>
<p>也可以用于检测JSON数据，简单对象即是JSON数据结构</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery.isPlainObject([])        // <span class="literal">false</span></div><div class="line">jQuery.isPlainObject(<span class="string">"&#123;&#125;"</span>)      // <span class="literal">false</span></div><div class="line">jQuery.isPlainObject(&#123;&#125;)        // <span class="literal">true</span></div><div class="line">jQuery.isPlainObject(&#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:&#123;<span class="string">"c"</span>:&#123;<span class="string">"d"</span>:&#123;<span class="string">"e"</span>:<span class="number">2</span>&#125;&#125;&#125;&#125;)    // <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="检测是否空对象"><a href="#检测是否空对象" class="headerlink" title="检测是否空对象"></a>检测是否空对象</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">jQuery</span><span class="selector-class">.isEmptyObject</span>(&#123;&#125;);               <span class="comment">// true</span></div><div class="line"><span class="selector-tag">jQuery</span><span class="selector-class">.isEmptyObject</span>(&#123; <span class="attribute">foo</span>: <span class="string">"bar"</span> &#125;);   <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="检测字符串是否JSON数据"><a href="#检测字符串是否JSON数据" class="headerlink" title="检测字符串是否JSON数据"></a>检测字符串是否JSON数据</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> msg = <span class="string">"&#123;\"a\":1&#125;"</span></div><div class="line"><span class="keyword">var</span> IS_JSON = <span class="literal">true</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">var</span> json = jQuery.parseJSON(msg);</div><div class="line">&#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">    IS_JSON = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> json </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你的时间有限-不要为别人而活]]></title>
      <url>http://oneblog.top/2015/09/08/books/%E4%BD%A0%E7%9A%84%E6%97%B6%E9%97%B4%E6%9C%89%E9%99%90-%E4%B8%8D%E8%A6%81%E4%B8%BA%E5%88%AB%E4%BA%BA%E8%80%8C%E6%B4%BB/</url>
      <content type="html"><![CDATA[<p>毫无疑问，这是一本指导人们实现自我梦想的书籍。</p>
<h2 id="最大收获"><a href="#最大收获" class="headerlink" title="最大收获"></a>最大收获</h2><p>这是一本讲梦想的书，但是，对我而言，这本书给我的最大收获，却是让我充分地认识到了，人们对言行得体的人没有攻击力。</p>
<p>这句话说的太好了，不知道为什么一下子我就突然全明白了，之前我那么多不得体的举动，有因为自大造成的、因为自卑造成的、因为不合群造成的、因为过于想表现自己造成的，种种种种，都可以归为言行不够得体，我更加深刻的认识到这一切不得体举动的背后，更多地折射出我内心的不自信。</p>
<p>认识到这一点，更加让我坚定了不管如何，先让自己自信起来的决定。让自己自信，每个人走的自信之路都是不同，因为每个人从心底认可自己的方式都是不同的。我们需要在和外界不断的碰撞中找到属于自己的自信之路。</p>
<h2 id="梦想金字塔"><a href="#梦想金字塔" class="headerlink" title="梦想金字塔"></a>梦想金字塔</h2><p>首先要做的，是先设计自己的人生，作者相信人生是设计出来的，在书中，我第一次看到了“梦想金字塔”，分为三级，分别是：</p>
<ul>
<li>基础阶段 （“健康”“修养+知识”“心灵+精神”）</li>
<li>实现阶段 （“社会+工作”“个人+家庭”）</li>
<li>结果阶段 （“经济+物质+金钱”）</li>
</ul>
<p>写下梦想和计划，经常回顾；想象着每天都要给梦想浇水施肥。然后，根据当前所知，列出实现梦想所必需的事情，制作行程表，安排实施，经常回顾进度并调整。</p>
<a id="more"></a>
<h2 id="培养实现梦想的能力"><a href="#培养实现梦想的能力" class="headerlink" title="培养实现梦想的能力"></a>培养实现梦想的能力</h2><p>光秃秃的梦想是不可能实现的，梦想需要具体化、数据化，为什么无法坚持计划，往往是因为没有数据化！</p>
<p>每天都思考“重点是什么”，先沉住气，找到最短距离（重点）后再一口气向前冲，这样才有利于培养做事有条不紊的能力</p>
<p>光自己干好肯定是不够的，要学习如何带领部下完成工作，不懂带人你只会干到死。</p>
<h2 id="养成实现梦想的习惯"><a href="#养成实现梦想的习惯" class="headerlink" title="养成实现梦想的习惯"></a>养成实现梦想的习惯</h2><p>好想法好句子等等，立即记录下来；始终关注目标；注意选择信息；记录信息的几个层次（临时笔记+思维导图+云笔记）</p>
<p>努力工作的同时，休息时绝不想工作，以免两相误；灵感多在休息时间迸发！</p>
<h2 id="提高情商"><a href="#提高情商" class="headerlink" title="提高情商"></a>提高情商</h2><p>想尽办法结交大人物；人们对言行得体的人没有攻击力；常怀感恩，万事如意（尽量多看别人的优点，少关注别人的缺点）感恩之心会影响面相，好的面相很重要。</p>
<h2 id="提升判断力"><a href="#提升判断力" class="headerlink" title="提升判断力"></a>提升判断力</h2><p>如果不能成为第一，从一开始就不要碰；不要恶性竞争；让优秀的人成为明星；快速成长方能基业长青。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一个人的策展年代]]></title>
      <url>http://oneblog.top/2015/09/08/books/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%AD%96%E5%B1%95%E5%B9%B4%E4%BB%A3/</url>
      <content type="html"><![CDATA[<p>这本书和我预期有些偏差，原来是希望读到如何整理个人资料库的专著，这本书确实也着重说明了整个过程，但是我期望的重点，是个人资料库如何组织和关联，而这本书的重点却是构建个人资料库的整体思路和做法。</p>
<p>但这本书也给出了不少启发，首先，让我初步接触了<code>策展</code>这个词，让我更加理解构建个人资料库（知识库）的必要性和重要性；再者，验证了我对于个人资料库构建过程的想法，已经基本和作者一致，至少让我确定在这个方面，我走的是正确的道路，让我更有信心按照这种模式走下去。</p>
<p>虽然说在个人资料库的组织方面存在诸多困惑，但也许这对于每个人都是一个从不懂到懂，从一片混乱到井然有序的过程，经历一下应该是有好处的，有助于个人资料库的道路上走的更稳更远。</p>
<p><code>策展</code>，有可能会被越来越多的人重视，这样的话，云图智如果做得好，也许真的迎来了一个契机。这本书，也为云图智的需求输入提供了证明。</p>
<a id="more"></a>
<p>接下来，在此整理一下，作者所认为的个人资料库整理的一些想法和做法。</p>
<h2 id="策展"><a href="#策展" class="headerlink" title="策展"></a>策展</h2><p>本书名为《一个人的策展年代》，首先我们得先了解下策展这个词的意思。</p>
<p>在百度上，策展的定义是：指在中国文化创意、艺术文化领域，通过创意构思、资源整合（人脉、文化艺术、渠道、媒体）等智慧劳动，链接中高端品牌、文化、艺术项目与社会大众的关联，使活动、展览、演出发挥高效系统专业的经济、社会、文化效应。</p>
<p>简而言之，对于个人而言，<code>策展就是要有效建立自己个人的知识库，实现自身知识、人脉、各类工具等各项资源的有效整合，从而让自己的工作更加高效，生活更加丰富，更加充满创意。</code></p>
<h2 id="创新源自于（杂学）资料库"><a href="#创新源自于（杂学）资料库" class="headerlink" title="创新源自于（杂学）资料库"></a>创新源自于（杂学）资料库</h2><p>专业领域之外都是杂学，作者认为创新基本来自于专业领域之外，我亦深表认同。从自身工作而言，都能发现很多这样的示例。比如我们软件设计缓存机制时，就参考了硬件领域CPU多级Cache的设计理念；更不用说现有的那么多仿生研究领域。</p>
<p>在书中，作者给出了资料库的解释，比喻可以随记应应变地活用多样知识的丰富经历。虽然有点拗口，但是我们还是可以基本解读作者想表达的意思。关键在于两点，一是丰富的知识和经验，而是可以随机应用，缺一不可。不够丰富则不能称之为库，不能随机应用只能说明这些知识还未成为你的库。</p>
<h2 id="资料库内容选择"><a href="#资料库内容选择" class="headerlink" title="资料库内容选择"></a>资料库内容选择</h2><p>要建立资料库，那就需要明确资料库中需要有哪些内容，即主题是什么。</p>
<p>在确立自己的专业领域之后，资料库主题的选择，首先是要有兴趣。除此之外，就是从自己的工作和生活中去发现，寻找自己期望深入了解的主题。当然主题的数量没有限制，不必说的是量力而行。</p>
<p>设定自己的远期、中期和短期的主题目标，当然目标有可能会随着自身的变化而变化，及时做出调整即可。</p>
<h2 id="尽可能亲身体验"><a href="#尽可能亲身体验" class="headerlink" title="尽可能亲身体验"></a>尽可能亲身体验</h2><p>明确资料库主题之后，就要了解如何丰富它记录它。在这方面，作者特别强调了亲身体验、现场体验，动用五官体验法，要动用全身的感觉去到第一现场去体验，并将观察体验的结果转化成知识，这样能够更有效地记忆。</p>
<p>要从身边的环境开始仔细观察和体会，重视每件事情现场的观察和体验，不仅用眼睛观察，更要动用五感去细心体会和感受，尽可能多地获取第一手的资料。</p>
<h3 id="应用于个人习惯的重点方法"><a href="#应用于个人习惯的重点方法" class="headerlink" title="应用于个人习惯的重点方法"></a>应用于个人习惯的重点方法</h3><ul>
<li>凡事立刻记录</li>
<li>（估计能够查询到的内容）立即查询并记录</li>
</ul>
<h3 id="观察的方法"><a href="#观察的方法" class="headerlink" title="观察的方法"></a>观察的方法</h3><ul>
<li>尽可能现场观察</li>
<li>根据观察结果进行自我假设并验证，经常思考为什么</li>
<li>以主题为关键字进行观察</li>
<li>运用各种比较（类比）</li>
<li>尽可能找出共通点和关联性</li>
</ul>
<h3 id="观察的角度"><a href="#观察的角度" class="headerlink" title="观察的角度"></a>观察的角度</h3><ul>
<li>360度全方位观察</li>
<li>发现并关注相反的观点</li>
<li>尽可能发现更多不同角度的观点</li>
<li>观察不限于眼睛，要积极动用五感</li>
</ul>
<h2 id="多阅读相关书籍"><a href="#多阅读相关书籍" class="headerlink" title="多阅读相关书籍"></a>多阅读相关书籍</h2><p>个人能够亲身体验的事务，总是有限的。更多时候，还是要依赖于阅读来补充。</p>
<p>在这个方面，作者建议通过快速阅读（书籍结构-目录-段落开头结尾）增加自己的阅读量，多做笔记和符号；同类的书尽可能选择不同角度的进行多方面的了解和学习；一本书根据需要进行阅读，可以不必读完。</p>
<h2 id="知识互动和关联"><a href="#知识互动和关联" class="headerlink" title="知识互动和关联"></a>知识互动和关联</h2><p>只有输入没有输出的学习，那肯定是没有效果的。所以我们在大量输入资料的同时，要注意输出的平衡。</p>
<p>我们可以使用文字或语言的形式进行表达，通过网络工具（如微博、博客等）或者口头交流等多种方式把学习到的知识和外部进行交流，以获取尽可能多的反馈，从而形成有益的互动来增强知识库内容和记忆。</p>
<p>还可以根据已有知识库的内容进行联想，制作思维导图，以便将自身尽可能多的知识关键点形成关联，以便全局性的掌握自己的知识、工具、人脉等资源情况。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[bootstrap-3.x的submenu？]]></title>
      <url>http://oneblog.top/2015/09/06/infotech/bootstrap/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6/bootstrap-3-submenu/</url>
      <content type="html"><![CDATA[<p>bootstrap 3.x为了尽可能多地支持移动设备，果断放弃了对submenu的支持，真是令人遗憾啊，这个多级菜单在PC上实在是太太太常见的需求了。</p>
<p>好在，github上已经有大神给出了解决方案，还行，请参见 <a href="https://github.com/vsn4ik/bootstrap-submenu" target="_blank" rel="external">bootstrap-submenu</a> 。</p>
<blockquote>
<p>注意 2.0.0 版本的使用，同之前有所区别。使用之前版本的同学，在升级时需要注意用法上的变化。</p>
</blockquote>
<a id="more"></a>
<h2 id="JS-CSS脚本加载"><a href="#JS-CSS脚本加载" class="headerlink" title="JS|CSS脚本加载"></a>JS|CSS脚本加载</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"dist/css/bootstrap-submenu.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-2.1.4.min.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/js/bootstrap-submenu.min.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="dropdown-submenu片段"><a href="#dropdown-submenu片段" class="headerlink" title="dropdown-submenu片段"></a>dropdown-submenu片段</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown m-b"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">data-submenu</span>=<span class="string">""</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-submenu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>Dropdown header<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span>Sub action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span>Another sub action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="启用submenu"><a href="#启用submenu" class="headerlink" title="启用submenu"></a>启用submenu</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">'[data-submenu]'</span>).submenupicker();        <span class="regexp">//</span> bootstrap-submenu <span class="number">2.0</span>.<span class="number">0</span> 以上版本</div></pre></td></tr></table></figure>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">'.dropdown-submenu &gt; a'</span>).submenupicker(); <span class="regexp">//</span> bootstrap-submenu <span class="number">2.0</span>.<span class="number">0</span> 以下版本</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里的ICONFONT图标应用指南]]></title>
      <url>http://oneblog.top/2015/09/06/infotech/css/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B5%84%E6%BA%90/ali-iconfont-guide/</url>
      <content type="html"><![CDATA[<p>这个时代技术的变化真是太快了，font-awesome方兴未艾，svg-icon就开始大行其道了，真是让人应接不暇。</p>
<h2 id="为什么选择SVG-ICON"><a href="#为什么选择SVG-ICON" class="headerlink" title="为什么选择SVG ICON"></a>为什么选择SVG ICON</h2><p>网络上有人专门讨论了为什么要从font-icon转向svg-icon，参见<a href="http://www.w3ctech.com/topic/92" target="_blank" rel="external">Web 设计新趋势: 使用 SVG 代替 Web Icon Font</a>和<a href="http://ourjs.com/detail/532bdaea6922aa7e1d000002" target="_blank" rel="external">我们由 icon-font 转向 SVG 的10 个理由</a>。</p>
<p>在我个人看来，转向SVG-ICON，主要有几个原因：</p>
<ul>
<li>项目需要（有的项目可能必须用到SVG-ICON，比如SVG项目，不太适合在SVG中整合FONT-ICON）</li>
<li>在FONT-ICON中没有找到合适的图标（对我而言，也就是在font-awesome中找不到合适的图标，没有美工基础真难啊）</li>
<li>显示效果更好（确实不错，据说最适合retina屏幕）</li>
</ul>
<p>其它原因对我而言都是次要的。当然SVG-ICON和FONT-ICON一样，都支持style设置，可以轻松地设置大小、颜色等等样式；都能够被大多数浏览器支持，因此都是满足开发的基本要求的。</p>
<a id="more"></a>
<h2 id="阿里的ICONFONT"><a href="#阿里的ICONFONT" class="headerlink" title="阿里的ICONFONT"></a><a href="http://iconfont.cn/" target="_blank" rel="external">阿里的ICONFONT</a></h2><p>基本操作流程：</p>
<ol>
<li>选中图标，放到暂存架（重复选中完成）</li>
<li>到暂存架中，选择存储为项目（创建新项目），或存储成历史项目（即保存到已有项目中）</li>
<li>到图标管理中，选中已存储的项目，可以选择下载到本地或获取在线链接<br>完成这三步，就可以像fontawesome一样使用了。</li>
</ol>
<blockquote>
<p>还可以使用阿里CDN为你的SVG-ICON加速，很方便。</p>
</blockquote>
<h3 id="在HTML加载ICONFONT"><a href="#在HTML加载ICONFONT" class="headerlink" title="在HTML加载ICONFONT"></a>在HTML加载ICONFONT</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;i <span class="keyword">class</span>=<span class="string">"iconfont"</span>&gt;&amp;<span class="meta">#33&lt;/i&gt;</span></div></pre></td></tr></table></figure>
<p>以上代码中的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 在SVG加载ICONFONT</div></pre></td></tr></table></figure></p>
<p><text x="100" y="100" font-family="iconfont" font-size="24px" fill="#933">&#xe606;</text><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 显示效果（图标大小不一）</div><div class="line"></div><div class="line">虽然使用上方便了，但是在HTML和SVG中，这些图标的显示却不美观，最主要的原因就是大小不一（明明已经设置成相同的font-size），总是有那么点细微的差别，确实很明显，很难看。</div><div class="line"></div><div class="line">### 图标大小不一的临时解决方案</div><div class="line"></div><div class="line"><span class="number">1.</span> 做成symbol（需要增加一个透明的rect，否则鼠标移动上去很奇怪，只会在有SVG线条的地方，才能被鼠标识别到，如有更好的解决方案，跪求）</div><div class="line"><span class="number">2.</span> use应用</div></pre></td></tr></table></figure></p>
<p><symbol id="icon-link"><br>    <path fill="#272636" d="M500 800c-276.1563 0-500-223.8438-500-500s223.8438-500 500-500 500 223.8438 500 500-223.8438 500-500 500zM500-106.25c-224.375 0-406.25 181.875-406.25 406.25s181.875 406.25 406.25 406.25 406.25-181.875 406.25-406.25-181.875-406.25-406.25-406.25zM794.1875 344.1875l-250 250c-24.4063 24.4063-63.9688 24.4063-88.375 0s-24.4063-63.9688 0-88.375l143.3125-143.3125h-349.125c-34.5313 0-62.5-27.9688-62.5-62.5s27.9688-62.5 62.5-62.5h349.125l-143.3125-143.3125c-24.4063-24.4063-24.4063-63.9688 0-88.4063 12.2188-12.1875 28.1875-18.3125 44.1875-18.3125s32 6.0938 44.1875 18.3125l250 250c24.4063 24.4063 24.4063 63.9688 0 88.375z" transform="matrix(0.016,0,0,-0.016,0,14)"></path><br>    <rect width="1024" height="1024" fill="transparent" stroke-width="0" transform="matrix(0.015625,0,0,-0.015625,0,17)"></rect><br></symbol><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">以下<span class="keyword">use</span>引用，是在dropdown菜单项的前部加入SVG-ICON</div></pre></td></tr></table></figure></p>
<p><li><br>    <a href="#"><br>        <svg width="16px" height="18px"><br/>            <use transform="scale(0.8)" xlink:href="#icon-link" y="1px"/><br/>        </svg>&nbsp;链接</a><br></li><br>```</p>
]]></content>
      
        
        <tags>
            
            <tag> svg </tag>
            
            <tag> icon </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[荣耀7入手]]></title>
      <url>http://oneblog.top/2015/09/04/life/huawei-rongyao-7/</url>
      <content type="html"><![CDATA[<p>犹豫再三，终于看在京东98%的好评上，入手了一台荣耀7，用了两天，感觉还不错，对得起2199大洋。本想多花300元买个全网通版本土豪一把，可是华为不给力，在我抢购的时候居然一台全网通的荣耀7都没有提供。经过5分钟的短暂思考，抛弃了全网通的64G存储、任意双卡双待、NFC-SIM和快充这些功能的吸引，抢到了电信4G版本的荣耀7。</p>
<p>拿到机器后，不得不说，立即让人不爽的，就是那个令人腻味的电信4G的开机动画，还有死死印在机身背面下方的电信4G的LOGO，让人没来由的一阵烦躁，不由得后悔没有多等两周再抢全网通版本。开机后，又看到一堆的电信预装应用，无语……</p>
<a id="more"></a>
<p>好在，荣耀7一般不用重启，也就看不到那个恶心的动画；机身背后的LOGO，也可以找张合适的图片贴掉；预装的电信软件，还好还是可以直接删除的，花个几分钟就OK了。看起来胃口好点了，嘿嘿……白色+银色的外观，还是比较耐看的，荣耀7还很贴心的自带了贴膜，对于我这样不太在意贴膜质量的人来说，感觉很省事。</p>
<p>接下来到重点了，我不是手机的发烧友，但也愿意在此分享一下荣耀7上我觉得不错的功能，能让人眼前一亮。</p>
<h2 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h2><p>硬件支持的指纹解锁，无疑是众多新功能中的亮点，这个日常无数遍重复的动作，最能考验设备的性能，毫无疑问，荣耀7在这点上绝对是让人信服的。</p>
<p>只是我有一点疑问，在设置指纹解锁之后，依然支持密码解锁，这样的话，安全性方面是不是打了折扣？因为荣耀7的指纹解锁功能据说是绑定在CPU上的，相对安全，但是密码就不行了。</p>
<p>看来指纹还是只解决了易用性的问题，没有解决安全性的问题，希望华为荣耀团队尽快改进，或做出合适的解释。</p>
<blockquote>
<p>引文：考虑到Android平台开放性的特点，难保黑客不会通过技术破解的手段拿到用户的指纹信息。荣耀7针对这一潜在威胁开发出“双硬件安全防护系统”，首先是在海思麒麟处理器上面集成了ARM TrustZone技术，实现了将荣耀7的硬件和软件资源硬隔离；其次荣耀7还拥有一个专门存储用户指纹信息的“RPMB安全存储区域”，通过和手机处理器进行绑定，确保黑客无法对这个“RPMB存储区域”进行破解。</p>
</blockquote>
<h2 id="智能WLAN"><a href="#智能WLAN" class="headerlink" title="智能WLAN"></a>智能WLAN</h2><p>说实话，开始并没有发现这也是个功能，但是用了两天之后，发现还是很不错的，能够节省不少人力。实用！！！</p>
<p>智能WLAN，就是会在WLAN和手机流量之间自动切换；就算手机上WLAN没有打开，当你靠近之前用过的WLAN的时候，也会自动开启WLAN功能并自动连接上。</p>
<p>个人估计，这个智能WLAN能够自动识别这个之前用的WLAN在当前时候是否可以上网，并且在判断可以自动上网后才会连接上，如果真是做到了这一点，必须给个赞！有待进一步确认。</p>
<h2 id="智灵按键"><a href="#智灵按键" class="headerlink" title="智灵按键"></a>智灵按键</h2><p>这个华为广为宣传的功能，还算可以，不过我认为并不像其宣传的那么神奇，其实就是多了一个自定义的按键而已。只不过这个自定义按键的默认功能中，有个智能语音的功能。</p>
<p>这个按键支持单击、双击和长按的操作，可以分别定义对应的动作。</p>
<p>智能语音还是不错的，识别准确度还行，不过杂音会有明显的影响。支持很多场景，比如对着电话说“打电话给xxx”，荣耀7就会自动拨号给xxx，其它场景可以看帮助文档。</p>
<h2 id="语音唤醒"><a href="#语音唤醒" class="headerlink" title="语音唤醒"></a>语音唤醒</h2><p>这个功能挺有趣的。我们偶尔都会发生明明手机在房间里，就是找不到的情况。此时荣耀7的语音唤醒功能就派上用场了。只要在安静的环境下，大声说“荣耀，小7”，等待3秒后，再说“你在哪儿”，哈哈，就会听到手机发出的声音了。</p>
<h2 id="情景智能"><a href="#情景智能" class="headerlink" title="情景智能"></a>情景智能</h2><p>看官方说明，是可以根据短信等数据自动分析并抓取生成手机使用者的相关事务，并进行智能提醒。比如当天如果下雨，则会提示我们带上雨具。其它场景有待进一步发现。</p>
<h2 id="手势控制"><a href="#手势控制" class="headerlink" title="手势控制"></a>手势控制</h2><p>提供了翻转手机停止来电响铃等手势控制功能，之前没有用过，在这里记录一下。其实这很早就有了，我知道的。</p>
<h2 id="快速截屏"><a href="#快速截屏" class="headerlink" title="快速截屏"></a>快速截屏</h2><p>指节两下扣屏即可截屏，有点特色；还可以画圈截屏（好像画圈前要先指节扣屏两次），这个动作有点难用。</p>
<h2 id="单手操作"><a href="#单手操作" class="headerlink" title="单手操作"></a>单手操作</h2><p>实用，对于我这样手不够大的人来说，很实用。</p>
<h2 id="手套模式"><a href="#手套模式" class="headerlink" title="手套模式"></a>手套模式</h2><p>还未试用，应该是支持戴着手套操作吧……</p>
<p>最后再提一点，荣耀7的3G内存果然够用了，不再捉襟见肘了，就让应用开着，不用再经常清理内存了，真是太HAPPY了，打开各个应用的速度自然非常明显的快了。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[简单工作力量大]]></title>
      <url>http://oneblog.top/2015/08/28/books/%E7%AE%80%E5%8D%95%E5%B7%A5%E4%BD%9C%E5%8A%9B%E9%87%8F%E5%A4%A7/</url>
      <content type="html"><![CDATA[<h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>大师系列的书，大多数总是能切中要害。本书在开篇就提出了简单工作的核心思想：</p>
<blockquote>
<p>对于个人而言，提升贡献的真正关键，不在于精通目前的工作；而是要寻找简单合适的方法，尽可能删除不相干的事务，以便投入更多的时间，在真正紧要的工作上发挥个人独特的才能。</p>
<p>对于组织而言，则应该尽可能的培养出有能力实现“做更少、却成就更多”的领袖，因为这种领袖，会创造让人们更容易成就伟大事业的工作环境。</p>
</blockquote>
<p>以上两段文字，我所理解的，就是一切紧紧围绕的目标，尽可能减少和目标无关的动作。</p>
<a id="more"></a>
<h2 id="行为准则"><a href="#行为准则" class="headerlink" title="行为准则"></a>行为准则</h2><p>行为准则，是在核心思想的前提下，针对每件事情的基本处理方式提出的基本原则。</p>
<p>书中提到的32个概念，多是针对特定事务提出的处理技巧，从根本而言，大都基于CLEAR五项原则：</p>
<ul>
<li>是否和当前工作目标相关</li>
<li>是否明确指出了待办事项</li>
<li>是否明确了期望的结果</li>
<li>是否指出了有效的工具或方法</li>
<li>是否明确了可能的回报或所得</li>
</ul>
<h2 id="优良工作环境的定义"><a href="#优良工作环境的定义" class="headerlink" title="优良工作环境的定义"></a>优良工作环境的定义</h2><ul>
<li>管理阶层编排和分享信息的方式，让人们能更聪明、更快速地工作；</li>
<li>高层管理团队平易近人，基层员工不必浪费时间探查他们的行踪；</li>
<li>一切必要资源（包括敬请、详尽的信息）皆准备就绪，随时可得；</li>
<li>具备容易使用及取的的工具、训练、指令和信息科技；</li>
<li>新工具能够快速分配给前线员工使用，不隐藏也不限制使用；</li>
<li>公司尊重员工的时间要求，把重心放在协助他们变得更明智、更具效能；</li>
</ul>
<h2 id="伟大公司的基本要素："><a href="#伟大公司的基本要素：" class="headerlink" title="伟大公司的基本要素："></a>伟大公司的基本要素：</h2><ul>
<li>建立可靠稳固的信誉</li>
<li>尊重员工的专业能力</li>
<li>公平地分享利润及对待员工</li>
<li>让员工为自己的贡献感到自豪</li>
<li>建立温暖的战友情谊</li>
<li>尊重员工，视其为重要的资产</li>
<li>欣然提升组织各阶层的透明度</li>
<li>提供员工达成最佳表现所需的条件，让他们不分心、不受公司政治干扰</li>
<li>让人们投入伟大计划、与杰出之士共事</li>
<li>保持简单，将阻挡人们成就伟大事业的绊脚石搬除，让员工不必屈服于效率不高或绊手绊脚的制度，进而有机会达到世界级的工作表现</li>
</ul>
<h2 id="简单的工作技巧"><a href="#简单的工作技巧" class="headerlink" title="简单的工作技巧"></a>简单的工作技巧</h2><h3 id="持续追踪简单"><a href="#持续追踪简单" class="headerlink" title="持续追踪简单"></a>持续追踪简单</h3><p>持续提升工作减量的技能，书中提到的三点很对：</p>
<ul>
<li>综合能力：扫描信息，判断轻重；</li>
<li>鼓吹能力：说服他人采取行动；</li>
<li>沟通能力：与其他人联系、共事的能力<br>对于我个人而言，专业能力也是重点之一，只有不断改进技能，才能更好的提升效率。可惜的是，专业能力这一点恐怕只是小团队的标准；而作者的书是为大公司写的；看来不在一个层次上啊。</li>
</ul>
<h3 id="绩效评估（主动沟通）"><a href="#绩效评估（主动沟通）" class="headerlink" title="绩效评估（主动沟通）"></a>绩效评估（主动沟通）</h3><ul>
<li>绩效评估，每个月询问上司我做的如何，得到上司的建议；</li>
<li>每两个月，和上司讨论最重要的三项工作；</li>
<li>投入真正重要的工作，而不是扯皮。</li>
</ul>
<h3 id="提高个人声望"><a href="#提高个人声望" class="headerlink" title="提高个人声望"></a>提高个人声望</h3><p>如何提高个人声望和生产力，应着眼于为公司涉及良好的工作流程和负荷量，使人们得以更好、更快、更聪明的方式工作。就个人而言，技术能力也是提高声望的重要因素；而管理能力，很可能不容易被人识别，特别是基层人员。</p>
<h3 id="简报的目的在于创造对话"><a href="#简报的目的在于创造对话" class="headerlink" title="简报的目的在于创造对话"></a>简报的目的在于创造对话</h3><p>伟大的简报，应以改变日后对话内容为目标。注意：</p>
<ul>
<li>如果需要高阶主管支持，则在简报中明确提出；</li>
<li>不要一次性抛出所有议题，而应循序渐进，试探上司的意见，来决定是否要进行其它议题；</li>
<li>尽量在简报中给高阶主管流出发表意见的机会；</li>
</ul>
<h3 id="快速明确工作目标"><a href="#快速明确工作目标" class="headerlink" title="快速明确工作目标"></a>快速明确工作目标</h3><p>迅速明确工作目标：</p>
<ul>
<li>新目标对我目前工作的影响；</li>
<li>第一步怎么做（如何启动）；</li>
<li>什么情况才算成功；</li>
<li>如何持续进步；</li>
<li>哪些工具、技巧和支持能够帮助我们达成目标？</li>
<li>对我或我们的好处？</li>
</ul>
<h3 id="主持会议基本原则"><a href="#主持会议基本原则" class="headerlink" title="主持会议基本原则"></a>主持会议基本原则</h3><p>主持会议，建议：</p>
<ul>
<li>开宗明义</li>
<li>把所有议题切割成各十五分钟长的小节，将重心放在会议中决定的待办事项上，维持进度。</li>
<li>对各项议题展现出充分的热情，以激发参会者的热情</li>
</ul>
<h3 id="任务承接基本原则"><a href="#任务承接基本原则" class="headerlink" title="任务承接基本原则"></a>任务承接基本原则</h3><p>不管是“说不的艺术”还是“持续追问为什么”，都应从公司（部门或团队）总体目标为出发点，来讨论当前最重要的三个目标，从而列出待办事项，明确近期要做的最重要的几件事情；从而明确近期的关键事务，而避免一片混乱的工作安排。</p>
<h3 id="跳槽基本原则"><a href="#跳槽基本原则" class="headerlink" title="跳槽基本原则"></a>跳槽基本原则</h3><p>感受新公司的工作氛围，快速的决断是否适合自己？如果有可能，可以先去新公司体验一下，但是目前据我了解，一般不太可能，最可能的方式还是入职后一周内的亲身体会。<br><code>如果新到一家公司，争取就职辅导，应该很有帮助。</code></p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx编码参数charset设置]]></title>
      <url>http://oneblog.top/2015/08/27/infotech/nginx/nginx-charset/</url>
      <content type="html"><![CDATA[<p>在nginx配置文件里，有个<code>charset</code>配置参数，平时很少留意，这次遭遇了乱码问题，关注了一下。</p>
<p>简单来说，这个配置项，是用来设置nginx返回结果的编码格式，即在返回的 HTTP RESPONSE 的 HEADER 的 CONTENT-TYPE 中，加入 charset=utf8 这样的代码，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Connection:keep-alive</div><div class="line">Content-Type:text/plain; charset=utf8</div><div class="line">Date:Thu, 27 Aug 2015 06:31:55 GMT</div><div class="line">Server:openresty</div><div class="line">Transfer-Encoding:chunked</div></pre></td></tr></table></figure>
<p>在nginx.conf文件中，可以全局配置charset，也可以在server或location中配置charset。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    ...</div><div class="line">    charset  utf-8;</div><div class="line">    ...</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  www.xxxxx.com xxxxx.com;</div><div class="line"></div><div class="line">    location /apachedoc/ &#123;</div><div class="line">        charset  gbk;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在个人知识库中应用分类和标签（categories|tags）]]></title>
      <url>http://oneblog.top/2015/08/27/infotech/hexo/howto-use-tags-categories/</url>
      <content type="html"><![CDATA[<p>在这个知识爆炸的年代，有效地整理个人知识库，越来越成为大家的必选项。</p>
<p>建立个人知识库，就要对知识库的知识进行有效的梳理和归纳，早先我们都习惯于使用文件夹，但这明显已经无法满足日益复杂的知识分类要求。</p>
<p>分类和标签，目前已经是内容维度划分的主流方式。</p>
<p><a href="http://blog.rexsong.com/?p=975" target="_blank" rel="external">参考博文</a></p>
<p>这篇博文讲的很好，提出了三个阶段理论。</p>
<a id="more"></a>
<ul>
<li><p>第一阶段，只有分类<br>这里的分类往往限制在一个维度里，当树状结构复杂到不可调和时，出现瓶颈是迟早的事。传统分类的问题，在于既不能完全满足用户需求，也不能完全表达创建者对内容属性的认知。</p>
</li>
<li><p>第二阶段，分类与标签并列<br>流传的公理指出，标签是分类的最好补充和扩展，是体现社会性的最好方式。标签和分类同时作用于内容，之间没有逻辑关系，这是现阶段最流行的组织方式。但在信息获取的角度，他们是两条独立的路径，显然还不算最优方案。</p>
</li>
<li><p>第三阶段，标签归属于分类<br>任意创建内容，使用标签建立内联，概括为分类后推送给用户。分类做为对标签的归纳，不直接作用于内容。也就是说，能够大量聚集的标签组成分类，满足二八原则，其他不能聚集的形成长尾频道，通过显隐两条线来贯穿用户的所有内容需求。</p>
</li>
</ul>
<blockquote>
<p>我个人倾向于选择第三阶段，标签归属于分类，即<code>标签+标签的分类</code>的方式进行个人知识库体系结构的规划。</p>
<ul>
<li>因为对于个人知识库这种情况，我们一般都是先创作内容，然后持续地新增内容以及重构自己的知识体系；</li>
<li>这种情况下，事先的分类一定会被不断打破；</li>
<li>不断被重构的知识体系，必然会此项产生大量新的标签；</li>
<li>众多的标签必然需要归类整理，而且可以任意组成新的分类，这样最有利于知识网格的形成</li>
</ul>
</blockquote>
<p>可惜目前hexo+next没有提供这种模式，只好暂时使用分类+标签各自分立（互相没有关联）的方式来管理内容了。待必要的时候再fork出来自定义代码。</p>
<p><a href="http://blog.sina.com.cn/s/blog_9559a1580101fcui.html" target="_blank" rel="external">参考博文一</a><br><a href="http://www.cnblogs.com/holbrook/archive/2012/11/04/2753533.html" target="_blank" rel="external">参考博文二</a><br><a href="http://group.vsharing.com/Article.aspx?aid=1646393" target="_blank" rel="external">参考博文三</a></p>
<blockquote>
<p>推荐书籍《为什么搜索将被淘汰》</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[当DIV被HOVER时如何作用于其它ELEMENTS(CSS)]]></title>
      <url>http://oneblog.top/2015/08/26/infotech/css/CSS%E6%8A%80%E5%B7%A7/css-div-hover-affect-other-element/</url>
      <content type="html"><![CDATA[<p>通常，我们遇到这类问题，第一反应很可能是采用JS来解决，实际上在很多情况下，CSS本身就提供了很方便的解决方案。</p>
<p>案例：div#aaa被hover时，div#bbb显示成粗体，div#ccc背景变色，可用如下css实现。</p>
<p><a href="http://jsfiddle.net/thebabydino/EajKf/" target="_blank" rel="external">在线案例参考</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> + <span class="selector-class">.b</span> &#123; <span class="attribute">font-weight</span>: <span class="number">900</span>; &#125;</div><div class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> ~ <span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: lightgreen; &#125;   <span class="comment">/* 改变div#bbb和div#ccc背景色 */</span></div><div class="line"><span class="selector-class">.b</span><span class="selector-pseudo">:hover</span> ~ <span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: lightgreen; &#125;   <span class="comment">/* 仅改变div#ccc的背景色 */</span></div></pre></td></tr></table></figure>
<blockquote>
<p>目前css选择器，只能选择next元素，不能选择previous元素。</p>
</blockquote>
<p><a href="http://stackoverflow.com/questions/4502633/how-to-affect-other-elements-when-a-div-is-hovered" target="_blank" rel="external">参考文档</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TortoiseGit访问Github无需输入密码配置方法（两种）]]></title>
      <url>http://oneblog.top/2015/08/25/infotech/git/tortoisegit-connect-github/</url>
      <content type="html"><![CDATA[<h2 id="Github官方指南"><a href="#Github官方指南" class="headerlink" title="Github官方指南"></a><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Github官方指南</a></h2><p>Git环境建议：Git+TortoiseGit+OpenSSH；</p>
<p>TortoiseGit要选择OpenSSH作为默认的控制台。可在TortoiseGit安装时选择，也可以在Setting -&gt; Network中配置。</p>
<blockquote>
<p>可能会出现的问题：执行ssh-add时可能会出现Could not open a connection to your authentication agent问题，此时执行以下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-agent bash</div></pre></td></tr></table></figure>
</blockquote>
<a id="more"></a>
<h2 id="本机配置方式"><a href="#本机配置方式" class="headerlink" title="本机配置方式"></a>本机配置方式</h2><p>当安装好Git环境后，运行 Git bash 命令，进入控制台，在用户目录下，会找到.gitconfig文件，其中包含了已经配置的name和email等信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-a</span> ~/ | grep git</div><div class="line">.gitconfig</div></pre></td></tr></table></figure>
<p>只需在.gitconfig文件中增加一行内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[credential]      </div><div class="line">    helper = store</div></pre></td></tr></table></figure>
<p>再次输入用户名密码，就会被本机Git环境记录下来，保存在用户目录的.git-credentials文件中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-a</span> ~/ | grep git</div><div class="line">.git-credentials</div><div class="line">.gitconfig</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
            <tag> tortoiseGit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-next-theme使用指南]]></title>
      <url>http://oneblog.top/2015/08/24/infotech/hexo/hexo-next-theme-guide/</url>
      <content type="html"><![CDATA[<p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题的官方文档</a>，非常详细，推荐！</p>
<p>这里不再重复说明，仅列出了一些不容易注意到的使用技巧。</p>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">主题设定</a></h2><a id="more"></a>
<ul>
<li>自定义LOGO和主题图标</li>
<li>RSS链接</li>
<li>标签云页面</li>
<li>分类页面</li>
<li>站点建立时间</li>
<li>数字公式显示</li>
<li>侧边栏头像</li>
<li>侧边栏社交链接</li>
<li>About页面</li>
<li>友情链接</li>
<li>404页面</li>
</ul>
<h2 id="摘要设置"><a href="#摘要设置" class="headerlink" title="摘要设置"></a>摘要设置</h2><p>next支持三种摘要的设置方式：</p>
<ul>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断</li>
<li>在文章的 front-matter 中添加 description，并提供文章摘录</li>
<li>自动形成摘要，在 主题配置文件 中添加：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">auto_excerpt:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  length: 150</div></pre></td></tr></table></figure>
<p>默认截取的长度为 150 字符，可以根据需要自行设定</p>
<blockquote>
<p>推荐第一种方式，即使用 <code>&lt;!-- more --&gt;</code> 手动进行截断</p>
</blockquote>
<p>第二种方式比较麻烦，需要多写一段文字；第三种方式的话，显示比较难看。</p>
<h2 id="设置归档页面文章篇数"><a href="#设置归档页面文章篇数" class="headerlink" title="设置归档页面文章篇数"></a>设置归档页面文章篇数</h2><p>安装hexo插件，在站点目录下使用 <code>npm install --save</code> 安装如下扩展：</p>
<ul>
<li>hexo-generator-index</li>
<li>hexo-generator-archive</li>
<li>hexo-generator-tag</li>
</ul>
<p>安装完成后，在 站点配置文章 中，设定：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">index_generator:</div><div class="line">  per_page: 5</div><div class="line"></div><div class="line">archive_generator:</div><div class="line">  per_page: 20</div><div class="line">  yearly: <span class="literal">true</span></div><div class="line">  monthly: <span class="literal">true</span></div><div class="line"></div><div class="line">tag_generator:</div><div class="line">  per_page: 10</div></pre></td></tr></table></figure>
<p>将 per_page 设定成所需要的篇数</p>
<h2 id="设置-favicon"><a href="#设置-favicon" class="headerlink" title="设置 favicon"></a>设置 favicon</h2><p>将 favicon 放置到站点的 source 目录下即可</p>
<h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>支持<a href="https://swiftype.com" target="_blank" rel="external">Swiftypes搜索</a>，而且提供了<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">详细的使用说明</a>。</p>
<h2 id="禁止用户评论"><a href="#禁止用户评论" class="headerlink" title="禁止用户评论"></a>禁止用户评论</h2><p>如需取消某个 页面/文章 的评论，在 md 文件的 front-matter 中增加 comments: false</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[培养孩子的好习惯]]></title>
      <url>http://oneblog.top/2015/08/24/edu/kids/habit_for_kids/</url>
      <content type="html"><![CDATA[<h2 id="早睡早起的习惯"><a href="#早睡早起的习惯" class="headerlink" title="早睡早起的习惯"></a>早睡早起的习惯</h2><p>　　<br>睡眠对于孩子们的身体发育有着很大的影响。从生活方面来说，早睡早起也可以让孩子在一天的时间里都充满活力。</p>
<h2 id="正确的饮食习惯"><a href="#正确的饮食习惯" class="headerlink" title="正确的饮食习惯"></a>正确的饮食习惯</h2><p>没有健康的身体，什么事情也做不成。</p>
<h2 id="自己整理书桌的习惯"><a href="#自己整理书桌的习惯" class="headerlink" title="自己整理书桌的习惯"></a>自己整理书桌的习惯</h2><p>不好好整理书桌的孩子，总会浪费大量的时间在找东西上。可以从制定学习计划和整理笔记开始，来培养孩子勤于整理的习惯。</p>
<a id="more"></a>
<h2 id="运动的习惯"><a href="#运动的习惯" class="headerlink" title="运动的习惯"></a>运动的习惯</h2><p>最近，孩子在学习能力提高的同时体力却在下降。只有身体强壮了学习才能搞好。所以，要培养孩子至少坚持进行一种运动的习惯。</p>
<h2 id="做家务的习惯"><a href="#做家务的习惯" class="headerlink" title="做家务的习惯"></a>做家务的习惯</h2><p>要让孩子们明白，他们作为家庭的一员，也应负起相应的责任来。可以让孩子做一些诸如自己房间的清洁卫生和垃圾分类回收等这些孩子力所能及的家务活，培养他们的责任感。</p>
<h2 id="先做作业再玩耍的习惯"><a href="#先做作业再玩耍的习惯" class="headerlink" title="先做作业再玩耍的习惯"></a>先做作业再玩耍的习惯</h2><p>作业是学习的基础。不好好做作业的话，是跟不上学习课程进度的。一定要让孩子养成不论怎样都先完成作业的习惯。</p>
<h2 id="读书的习惯"><a href="#读书的习惯" class="headerlink" title="读书的习惯"></a>读书的习惯</h2><p>读书是进行所有学习的开始。如果孩子讨厌读书的话，家长就大声朗读给孩子听，一直到孩子会自己去读书为止。</p>
<h2 id="自己收拾书包的习惯"><a href="#自己收拾书包的习惯" class="headerlink" title="自己收拾书包的习惯"></a>自己收拾书包的习惯</h2><p>不放心孩子自己收拾书包而代劳的做法是不可取的。孩子们在收拾书包的同时，也是在为第二天的学习做准备，这个时候千万不要去妨碍他们。</p>
<h2 id="保持清洁的习惯"><a href="#保持清洁的习惯" class="headerlink" title="保持清洁的习惯"></a>保持清洁的习惯</h2><p>只有身体清洁了，心情才会舒畅。并且，勤洗手也是预防疾病的最简单的方法。</p>
]]></content>
      
        <categories>
            
            <category> 教育 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[培养孩子的读书习惯]]></title>
      <url>http://oneblog.top/2015/08/24/edu/kids/reading_for_kids/</url>
      <content type="html"><![CDATA[<h2 id="基本原则-陪伴-身体力行"><a href="#基本原则-陪伴-身体力行" class="headerlink" title="基本原则 ~ 陪伴+身体力行"></a>基本原则 ~ 陪伴+身体力行</h2><p>四五岁的时候，孩子会开始有主动去阅读的意识。但对于这个年龄的孩子来说，阅读不算是一件轻而易举的事，父母可以为孩子选择一些绘本故事，主要以图画为主，让孩子克服识字困难的同时还可以培养孩子的想象力以及色彩感悟力，父母可以和孩子共同参与阅读，可以给孩子阅读一个快乐的起点。<br>同时，在说说一些陪伴孩子<code>阅读的好方法</code>：</p>
<ul>
<li>把书里的故事变成故事脚本，和孩子一起来玩角色扮演的游戏，吸引孩子的兴趣。</li>
<li>阅读不一定要正经的坐在书桌前，可以到公园的草坪中，望着蓝天白云而阅读。</li>
<li>特别注意的是，四五岁的孩子，不能要求她久坐不动。</li>
</ul>
<a id="more"></a>
<blockquote>
<p>中国家庭教育之悲哀，在于长辈惯于言语说教，少有身体力行的示范。</p>
</blockquote>
<h2 id="深度阅读的培养"><a href="#深度阅读的培养" class="headerlink" title="深度阅读的培养"></a>深度阅读的培养</h2><p>一个人从浅阅读到深度阅读，是有一个循序渐进的过程的，一般来说，这种能力的基础阶段是在3-4岁的反复阅读中逐渐形成的。</p>
<p>如果反复阅读的阶段，家长能稍微引导和鼓励孩子去<code>注意书中的各种细节，养成孩子专心研究一本书和经常重温一本书的习惯</code>，这个习惯就可以让孩子在小学阶段十分自然地踏进深度阅读的大门。</p>
<blockquote>
<p>0-6岁是阅读的黄金阶段，7-12岁是白银阶段，12岁以上就是青铜阶段了。</p>
</blockquote>
<p>除了故事，还能给孩子读什么？</p>
<p>其实可以读的东西是很多的，首先是语言类读物，比如<code>诗歌和散文。这类读物在阅读之初，建议家长和孩子一起以“朗诵”的形式进行大声朗读</code>，或是边放音乐边一起读，让孩子通过朗读的过程，从音律中领略语言之美，重新培养对母语的语感感知能力，而这种语感能力其实也是深度阅读的基础之一。</p>
<p>其次，可以根据孩子的兴趣爱好，选择一些<code>科普类或是手工类的书籍，再结合生活，进行一些延伸活动</code>。比如，孩子喜欢昆虫，就给他买一本昆虫记，再带孩子去可以观察昆虫的地方，结合书本中的文字描写，进行观察，再自己做一些记录，等等。</p>
<p>这种结合生活和爱好的阅读，会让孩子发现，除了阅读情节之外，即使是没有情节，书中的每个细节其实都可以给自己带来快乐和享受，这样，他自然会更多地专注于阅读细节了。</p>
<h2 id="孩子黄金阅读期的实用技巧"><a href="#孩子黄金阅读期的实用技巧" class="headerlink" title="孩子黄金阅读期的实用技巧"></a>孩子黄金阅读期的实用技巧</h2><ul>
<li>偶尔在关键的词或句子上停下来，让孩子自己说出关键的内容。</li>
<li><code>读完一个故事后，与孩子讨论，让孩子去探索</code>，帮助他通过口头表达、写作或其他艺术表现形式，来表达感受，但关键是用孩子自己愿意的方式。</li>
<li><code>在朗读时，大量运用表情</code>。如果可能，改变自己的声调，来扮演对话的人物，根据故事情节调整语速。在悬疑时，慢下来，降低声音。适当的时候压低声音，可以让孩子全神贯注。朗读最常犯的错误是：读得太快。</li>
<li>一定要提一下书名、作者与图画作者。在朗读前或朗读后，向孩子介绍作者的情况。让他们知道书是人写出来，不是机器制造的。你还可以<code>鼓励个别孩子写信给作者</code>，分享阅读心得。把作家还原成一个活生生的人，就像让他的故事活灵活现一样。</li>
<li>不妨手中拿着铅笔阅读。当你与孩子读到值得背下来的或发人深省的美文佳句时，在旁边做个小记号，画个小星星。<code>孩子应该与书有所互动</code>，方式之一就是在书上的精彩之处留下漂亮的笔迹。</li>
<li>读完一本书，然后带孩子观看由书改编的电影或电视剧。这种方法能让孩子体会到文字比影像表达得更丰富，这也是一项不同的情感体验，孩子会很乐意谈论书和电影的差别。</li>
<li>偶尔读一些内容较艰深的书，挑战孩子的头脑。</li>
<li>尽早给孩子朗读。你越早开始，做起来越容易，效果越好。常常听到有妈妈念叨“我家孩子咋就不爱看书呢？现在这么大咋办呢？”但请还是不要放弃，从孩子的兴趣喜好出发，挑有趣的好书培养和引发兴趣，慢慢来吧！</li>
</ul>
<h2 id="古诗词的选择"><a href="#古诗词的选择" class="headerlink" title="古诗词的选择"></a>古诗词的选择</h2><p>不要强制孩子读背大量的古代诗词，最好选择有具体场景而不是太抽象的诗词，以便于孩子在日常生活中可以体会到诗词的意境。</p>
<p>适合的诗词，有静夜思（李白），很生动，日常生活中随时可以体会到，如下：</p>
<blockquote>
<p>床前明月光，疑似地上霜；举头望明月，低头思故乡。</p>
</blockquote>
<p>不太适合的诗词，如嫦娥（李商隐），实在不太容易理解，如下：</p>
<blockquote>
<p>云母屏风烛影深，长河渐落晓星沉；嫦娥应悔偷灵药，碧海青天夜夜心。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 教育 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[sublime插件推荐]]></title>
      <url>http://oneblog.top/2015/08/19/infotech/sublime/sublime-plugins/</url>
      <content type="html"><![CDATA[<h2 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h2><p>远程服务器文件编辑、同步插件。</p>
<ul>
<li>付费说明<br>虽然是需要付费的，但是不付费的情况下，也仅仅会提示要付费，功能使用方面没有差异。</li>
<li>简单配置<br>在sublime的sidebar中指定目录上右键， SFTP/FTP -&gt; Map to Remote…，就会在该目录下生成sftp-config.json文件，配置参考如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"upload_on_save"</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line"><span class="string">"host"</span>: <span class="string">"xxx.xxx.xxx.xxx"</span>,</div><div class="line"><span class="string">"user"</span>: <span class="string">"xxxxx"</span>,</div><div class="line"><span class="string">"password"</span>: <span class="string">"xxxxx"</span>,</div><div class="line">//<span class="string">"port"</span>: <span class="string">"22"</span>,</div><div class="line"></div><div class="line"><span class="string">"remote_path"</span>: <span class="string">"/xxx/xxx/xxx/"</span>,</div><div class="line"><span class="string">"ignore_regexes"</span>: [</div><div class="line">    <span class="string">"\\.sublime-(project|workspace)"</span>, <span class="string">"sftp-config(-alt\\d?)?\\.json"</span>, <span class="string">"node_modules"</span>,</div><div class="line">    <span class="string">"sftp-settings\\.json"</span>, <span class="string">"/venv/"</span>, <span class="string">"\\.svn/"</span>, <span class="string">"\\.hg/"</span>, <span class="string">"\\.git/"</span>,</div><div class="line">    <span class="string">"\\.bzr"</span>, <span class="string">"_darcs"</span>, <span class="string">"CVS"</span>, <span class="string">"\\.DS_Store"</span>, <span class="string">"Thumbs\\.db"</span>, <span class="string">"desktop\\.ini"</span></div><div class="line">],</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>基本用法<br>  当sftp-config.json中的<code>upload_on_save</code>被设置成true时，该文件夹的的文件修改保存后，会自动连接到指定服务器，并在指定的目录下查找是否有相同文件名存在，如果存在，则会自动同步上去。（并未严格要求服务器目录和本地目录所有文件都一致）</li>
</ul>
<h2 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a><a href="https://github.com/sergeche/emmet-sublime" target="_blank" rel="external">Emmet</a></h2><p>快速编辑HTML和CSS的工具。<a href="http://emmet.io/" target="_blank" rel="external">官网</a><br>用法推荐阅读，<a href="http://www.iteye.com/news/13149" target="_blank" rel="external">http://www.iteye.com/news/13149</a></p>
<h2 id="Sublime-Navigation-History"><a href="#Sublime-Navigation-History" class="headerlink" title="Sublime Navigation History"></a><a href="https://github.com/timjrobinson/SublimeNavigationHistory" target="_blank" rel="external">Sublime Navigation History</a></h2><p>代码的Jump back|Jump forward功能。sublime text 3已经在内置该功能。其Jump back的默认快捷键是<code>Alt+minus</code>，即<code>Alt+-</code>；似乎没有默认的Jump forward快捷键。</p>
<p>因此建议配置快捷键如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123; "keys": ["ctrl+alt+left"], "command": "jump_back" &#125;,</div><div class="line">&#123; "keys": ["ctrl+alt+right"], "command": "jump_forward" &#125;</div></pre></td></tr></table></figure>
<h2 id="Snippet"><a href="#Snippet" class="headerlink" title="Snippet"></a>Snippet</h2><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><h2 id="AutoPrefixer"><a href="#AutoPrefixer" class="headerlink" title="AutoPrefixer"></a>AutoPrefixer</h2><h2 id="sublimeLinter"><a href="#sublimeLinter" class="headerlink" title="sublimeLinter"></a>sublimeLinter</h2><p>js脚本自动检查工具。待调查。</p>
<h2 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use"></a>Can I Use</h2><h2 id="DocBlockr"><a href="#DocBlockr" class="headerlink" title="DocBlockr"></a>DocBlockr</h2><p>文档快速注释插件。</p>
<blockquote>
<p>输入 /**，按tab键。</p>
</blockquote>
<h2 id="Trimmer"><a href="#Trimmer" class="headerlink" title="Trimmer"></a>Trimmer</h2><p>删除多余空格的插件。</p>
<h2 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a>AutoFileName</h2><p>自动填充文件完整路径的插件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 会逐次自动提示输入 assets css admin AdminLTE.css 同级目录洗所有文件和文件夹  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"assets/css/admin/AdminLTE.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML-CSS-JS-Prettify"><a href="#HTML-CSS-JS-Prettify" class="headerlink" title="HTML|CSS|JS Prettify"></a><a href="https://github.com/victorporof/Sublime-HTMLPrettify" target="_blank" rel="external">HTML|CSS|JS Prettify</a></h2><p>HTML|CSS|JS|JSON格式化插件，其默认格式就不错。<br>安装配置中需要注意，其需要nodejs支持，从preferences中可以看到有个<code>set node path</code>的菜单，其中已经有默认的node可执行程序的路径，可以根据自身的安装路径进行调整。</p>
<blockquote>
<p>快捷键：<code>Ctrl+Alt+H</code>，注意最好选中整个文件内容进行格式化。</p>
</blockquote>
<h3 id="JsFormat"><a href="#JsFormat" class="headerlink" title="JsFormat"></a>JsFormat</h3><p>Prettify可以完全替代JsFormat。</p>
<blockquote>
<p>快捷键：<code>ctrl+alt+f</code>，注意，工具栏中 view -&gt; indentation -&gt; Tab Width 的配置会影响格式化默认的indentation宽度。</p>
</blockquote>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>有了Prettify，基本也不考虑使用Alignment。</p>
<h2 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a>BracketHighlighter</h2><p>高亮显示各种tag开始和结束位置的插件。</p>
<h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><h2 id="Git-amp-amp-GitGutter"><a href="#Git-amp-amp-GitGutter" class="headerlink" title="Git &amp;&amp; GitGutter"></a>Git &amp;&amp; GitGutter</h2><p>Git在sublime text 3中没有发现乱码问题。<br>GitGutter可以在代码中标明变化的行，便于定位修改位置。</p>
<p>GitGutter在安装后，需要配置git的路径，否则无法使用。在用户配置文件中，增加配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"git_binary"</span>: <span class="string">"C:\\Program Files (x86)\\Git\\bin\\git.exe"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h2><p>Sublime侧边栏功能增强插件。</p>
<h2 id="MarkdownEditing"><a href="#MarkdownEditing" class="headerlink" title="MarkdownEditing"></a>MarkdownEditing</h2><p>Markdown文本编辑插件。</p>
<h2 id="InsertDate"><a href="#InsertDate" class="headerlink" title="InsertDate"></a><a href="https://packagecontrol.io/packages/InsertDate" target="_blank" rel="external">InsertDate</a></h2><p>快速插入各种日期格式的插件。</p>
<blockquote>
<p>比如想设置按两次快捷键ctrl+f5，可以插入%Y-%m-%d %H:%M:%S格式的日期数据，可以在Preferences &gt; Key Bindings - User文件中设置，如果不确定格式，可以参考Preferences -&gt; Package Settings -&gt; InsertDate下的Key Bindings相关设置</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">  <span class="attr">"keys"</span>: [<span class="string">"ctrl+f5"</span>, <span class="string">"ctrl+f5"</span>],</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"insert_date"</span>,</div><div class="line">    <span class="attr">"args"</span>: &#123;<span class="attr">"format"</span>: <span class="string">"%Y-%m-%d %H:%M:%S"</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SublimeREPL"><a href="#SublimeREPL" class="headerlink" title="SublimeREPL"></a>SublimeREPL</h2><p>直接执行脚本代码的插件。</p>
<blockquote>
<p>可以在Command Palette中快速选择调用。推荐<code>Alt+Shift+2</code>新建窗口使用</p>
</blockquote>
<h2 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h2><p>快速选择颜色（通过面板）的插件。</p>
<h2 id="其它插件"><a href="#其它插件" class="headerlink" title="其它插件"></a>其它插件</h2><ul>
<li>Terminal</li>
<li>CSSComb</li>
<li>EasyDiff</li>
<li>SublimeCodeIntel</li>
<li>less（less代码高亮）</li>
<li>minifier</li>
<li>Placeholder</li>
<li>Hex to HSL</li>
<li>GBK to UTF8</li>
<li>PackageResourceViewer</li>
</ul>
]]></content>
      
        <categories>
            
            <category> sublime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sublime plugins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo简明手册]]></title>
      <url>http://oneblog.top/2015/08/17/infotech/hexo/hexo-guide/</url>
      <content type="html"><![CDATA[<h2 id="hexo概述"><a href="#hexo概述" class="headerlink" title="hexo概述"></a>hexo概述</h2><p>Hexo是一款基于node.js的静态博客框架。<br>相比jekyll而言，它的主题（themes）更多，也更漂亮；同时，javascript/node.js将取代ruby/rails，成为更主流的编程语言和应用服务器，这两个原因是选择hexo的关键。</p>
<h2 id="hexo运行环境"><a href="#hexo运行环境" class="headerlink" title="hexo运行环境"></a>hexo运行环境</h2><p>Node.js + Git，建议将hexo运行环境配置和文档内容都保存在Github上。</p>
<blockquote>
<p>nodejs环境安装，有两种方式：下载源码包编译安装；nvm安装</p>
</blockquote>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="初始化工作目录"><a href="#初始化工作目录" class="headerlink" title="初始化工作目录"></a>初始化工作目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install  <span class="comment"># 视情况使用 sudo</span></div></pre></td></tr></table></figure>
<h3 id="工作目录结构"><a href="#工作目录结构" class="headerlink" title="工作目录结构"></a>工作目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── _config.yml         <span class="comment"># hexo站点配置文件</span></div><div class="line">├── package.json        <span class="comment"># 应用程序配置清单，包括应用名称、依赖包等信息</span></div><div class="line">├── public              <span class="comment"># 默认的静态文件生成目录｛初始化时不会创建｝</span></div><div class="line">├── scaffolds           <span class="comment"># post、page、draft默认的文档结构，主要包括了front-matter内容</span></div><div class="line">├── scripts             <span class="comment"># 扩展hexo功能的脚本</span></div><div class="line">├── <span class="built_in">source</span>              <span class="comment"># 内容文档</span></div><div class="line">|   ├── _drafts         <span class="comment"># 草稿目录</span></div><div class="line">|   └── _posts          <span class="comment"># 正式文档目录</span></div><div class="line">└── themes              <span class="comment"># 主题目录</span></div></pre></td></tr></table></figure>
<h2 id="hexo主要配置"><a href="#hexo主要配置" class="headerlink" title="hexo主要配置"></a>hexo主要配置</h2><p>根目录_config.yml中，主要参数配置说明如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">language: zh-Hans               <span class="comment"># 注意，是 zh-Hans</span></div><div class="line"></div><div class="line">url: http://oneblog.top         </div><div class="line">root: /                         </div><div class="line"><span class="comment"># 如果url是http://oneblog.top/public，则root变为/public/</span></div><div class="line"><span class="comment"># 同时，nginx配置也应改为</span></div><div class="line"><span class="comment"># location /public &#123;</span></div><div class="line"><span class="comment">#     root /opt/hexo/myblog;     # 内容文件放在 /opt/hexo/myblog/public 目录下   </span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line">theme: next</div></pre></td></tr></table></figure>
<h3 id="next主题配置"><a href="#next主题配置" class="headerlink" title="next主题配置"></a>next主题配置</h3><p>next主题根目录的_config.yml，主要参数配置说明如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scheme: Mist            <span class="comment"># 页眉样式切换</span></div><div class="line"></div><div class="line">sidebar: post           <span class="comment"># 在post文档有章节目录需要显示时，自动展示sidebar</span></div><div class="line"><span class="comment">#sidebar: always        # 总是显示sidebar</span></div><div class="line"><span class="comment">#sidebar: hide          # 总是隐藏sidebar</span></div><div class="line"></div><div class="line">auto_excerpt:           <span class="comment"># 仅显示文章摘要，否则会在首页上显示每篇文章的完整内容，可能导致页面非常长。</span></div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  length: 300</div></pre></td></tr></table></figure>
<h2 id="hexo文档写作"><a href="#hexo文档写作" class="headerlink" title="hexo文档写作"></a>hexo文档写作</h2><p>目前主要在sublime中创建编辑文档，因此不使用命令行<code>hexo new [layout] &lt;title&gt;</code>创建文档，而使用sublime的snippet功能快速生成hexo文档的front-matter内容。</p>
<p>（sublime snippet） hexo.post</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> </div><div class="line"><span class="attr">date:</span> </div><div class="line"><span class="attr">updated:</span> </div><div class="line"><span class="attr">comments:</span> </div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="attr">categories:</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<h2 id="hexo部署建议"><a href="#hexo部署建议" class="headerlink" title="hexo部署建议"></a>hexo部署建议</h2><p>从Github上<code>git pull</code>最新代码后，执行<code>hexo generate</code>，按照默认目录（public）生成最终静态文件，即可。</p>
<p>因为目前hexo开发环境和最终环境放在同一台服务器，因此直接由nginx指定root目录即可，暂时无需使用hexo提供的几种部署方式。</p>
<h2 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h2><p>目前可能会用到的hexo命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo clean              <span class="comment"># 当文档没有正常被更新时，用该命令清除缓存</span></div><div class="line">$ hexo list &lt;<span class="built_in">type</span>&gt;        <span class="comment"># type: post page route tag</span></div><div class="line">$ hexo version</div><div class="line">$ hexo --safe             <span class="comment"># Disables loading plugins and scripts.查找错误时使用</span></div><div class="line">$ hexo --debug</div></pre></td></tr></table></figure>
<h2 id="hexo深入"><a href="#hexo深入" class="headerlink" title="hexo深入"></a>hexo深入</h2><ul>
<li>Tag Plugin</li>
<li>Asset Folders</li>
<li>Data Files</li>
<li>Permalinks</li>
<li>Templates</li>
<li>Variables</li>
<li>Helps</li>
<li>Internationalization (i18n)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法示例]]></title>
      <url>http://oneblog.top/2015/08/14/infotech/hexo/markdown-example/</url>
      <content type="html"><![CDATA[<p>markdown语法样例整理，包括多级标题、有序列表、无序列表、引用、代码块、链接、图片、表格、特殊字符、反斜杠等初级和混合用法。主要满足文章结构划分、知识有序展示、内容便于阅读的要求。</p>
<h2 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">## 标题<span class="number">1</span></div><div class="line">标题<span class="number">1</span>的内容</div><div class="line">### 标题<span class="number">1.1</span></div><div class="line">标题<span class="number">1.1</span>的内容</div><div class="line">#### 标题<span class="number">1.1</span><span class="number">.1</span></div><div class="line">标题<span class="number">1.1</span><span class="number">.1</span>的内容</div><div class="line">## 标题<span class="number">2</span></div><div class="line">标题<span class="number">2</span>的内容</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ol>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>1<ul>
<li>1.1</li>
<li>1.2</li>
<li>1.3</li>
</ul>
</li>
<li>2<ul>
<li>2.1</li>
<li>2.2</li>
<li>2.3</li>
</ul>
</li>
<li>3<ul>
<li>3.1</li>
</ul>
</li>
</ul>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">React.render(&lt;HelloMessage name="foo" /&gt;, document.body);</div><div class="line">React.render(&lt;HelloMessage name="foo" /&gt;, document.body);</div><div class="line">React.render(&lt;HelloMessage name="foo" /&gt;, document.body);</div></pre></td></tr></table></figure>
<p>混合显示代码写法<code>wordpress+jekyll</code>混合显示代码写法</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<h3 id="引用内的标题一"><a href="#引用内的标题一" class="headerlink" title="引用内的标题一"></a>引用内的标题一</h3><blockquote>
<p>引用内的引用</p>
</blockquote>
<ul>
<li>无序列表一</li>
<li>无序列表二 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> html <span class="comment"># 引用内的代码块</span></div><div class="line"><span class="built_in">echo</span> html <span class="comment"># 引用内的代码块</span></div></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>列表一<br>正常内容<blockquote>
<p>列表一内的引用<br>列表一内的引用</p>
</blockquote>
</li>
<li>列表二<br>正常内容<blockquote>
<p>引用二<br>引用二</p>
</blockquote>
</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th style="text-align:left">Left</th>
<th style="text-align:center">Center</th>
<th style="text-align:right">Right</th>
<th style="text-align:right">ttt</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">aaa</td>
<td style="text-align:center">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</td>
<td style="text-align:right">ccc</td>
<td style="text-align:right">ttt</td>
</tr>
<tr>
<td style="text-align:left">ddd</td>
<td style="text-align:center">eee</td>
<td style="text-align:right">fff</td>
<td style="text-align:right">ttt</td>
</tr>
</tbody>
</table>
<hr>
<table>
<thead>
<tr>
<th>A</th>
<th>B </th>
</tr>
</thead>
<tbody>
<tr>
<td>123</td>
<td>456</td>
</tr>
</tbody>
</table>
<hr>
<table>
<thead>
<tr>
<th>A</th>
<th>B </th>
</tr>
</thead>
<tbody>
<tr>
<td>12</td>
<td>45</td>
</tr>
</tbody>
</table>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.baidu.com" title="百度" target="_blank" rel="external">行内链接-百度</a><br><a href="http://www.baidu.com" title="百度一下两下" target="_blank" rel="external">参考式链接-百度</a> 参考式链接<br><a href="http://www.google.com" title="google地图" target="_blank" rel="external">Google</a> 谷歌</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="http://feimg.qiniudn.com/1002015r.jpg" alt="在线图片"></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr>
<h2 id="重点标记"><a href="#重点标记" class="headerlink" title="重点标记"></a>重点标记</h2><p><em>single asterisks</em><br><em>single underscores</em><br><strong>double asterisks</strong><br><strong>double underscores</strong></p>
<p>Separates column by <strong>pipe (|)</strong> and header by <strong>dashes (-)</strong>, and uses <em>colon (:)</em> for alignment.<br>The outer <strong>pipes (|)</strong> and alignment are optional. There are <em>3 delimiters</em> each cell at least for separating header.</p>
<p>Inline link format like this: <code>[Link Text](URL &quot;Title&quot;)</code></p>
<h2 id="特殊字符-转义字符-反斜杠"><a href="#特殊字符-转义字符-反斜杠" class="headerlink" title="特殊字符|转义字符|反斜杠"></a>特殊字符|转义字符|反斜杠</h2><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>&lt; &gt; &amp; @ AT&amp;T 4 &lt; 5<br><code>&amp;copy;</code> 被转义成 &copy;</p>
<h3 id="转义字符和反斜杠"><a href="#转义字符和反斜杠" class="headerlink" title="转义字符和反斜杠"></a>转义字符和反斜杠</h3><p>1. 转义字符用法</p>
<p>\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p>
<h2 id="octpress插件用法"><a href="#octpress插件用法" class="headerlink" title="octpress插件用法"></a>octpress插件用法</h2><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<hr>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<hr>
<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<hr>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<hr>
<figure class="highlight plain"><figcaption><span>[title] [] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">code snippet</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight cpp"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">array</span>.<span class="built_in">map</span>(callback[, thisArg])</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight excel"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="built_in">false</span>, <span class="number">2</span>, '', <span class="number">3</span>]);</div><div class="line">=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">markdown官方语法</a></li>
<li><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">markdown官方语法中文译文</a></li>
<li><a href="http://blog.zhangruipeng.me/hexo-theme-alex/2015/01/25/Markdown%20Example/" target="_blank" rel="external">hexo主题参考</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客开篇]]></title>
      <url>http://oneblog.top/2015/08/13/start/</url>
      <content type="html"><![CDATA[<p>欢迎来到 <a href="http://oneblog.top/">酱汁中国</a>！工作多年以来，都想在互联网上记录自己的点点滴滴，之前也曾经使用wordpress、jekyll启动过这个想法，但由于各种各样的原因，都半途而废了……这一次，我又来了，hexo，再次承载着心中的梦想出发了，努力远行吧！</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
